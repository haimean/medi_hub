<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CommonQueryDigicheck" xml:space="preserve">
    <value>(WITH RESULT_TMP (PROJECT_ID, TOTAL_NO, TOTAL_1ST, TOTAL_YES, TOTAL_1PLUS, PROJECTTYPE, MONTH_NAME) as (
	SELECT
		CC.PROJECT_ID,
		COUNT(CASE WHEN CCD.CONFORM = 0 THEN 1 END) AS TOTAL_NO, -- no
		0 AS TOTAL_1ST, -- yes = 
		COUNT(CASE WHEN CCD.CONFORM = 99 THEN 1 END) AS TOTAL_YES, -- yes
		0 AS TOTAL_1PLUS, -- pass at 1st
		'QAQC_COMMON_CHECK' AS PROJECTTYPE,
		'Summary' AS MONTH_NAME
	FROM SUBAPP_CC CC
	LEFT JOIN SUBAPP_CC_CHECKLIST_DETAIL CCD ON CC.ID = CCD.CC_ID
	WHERE CC.IS_DELETED IS NOT TRUE
		AND CCD.IS_DELETED IS NOT TRUE
		AND @WHERECLAUSECOMMON
	GROUP BY CC.PROJECT_ID
)
SELECT
	PROJECT_ID, 
	SUM(TOTAL_NO) AS TOTAL_NO, 
	SUM(TOTAL_1ST) AS TOTAL_1ST, 
	SUM(TOTAL_YES) AS TOTAL_YES, 
	SUM(TOTAL_1PLUS) AS TOTAL_1PLUS,
	SUM(TOTAL_NO + TOTAL_YES) AS TOTAL, 
	PROJECTTYPE, 
	MONTH_NAME
FROM
	RESULT_TMP
GROUP BY PROJECT_ID, PROJECTTYPE, MONTH_NAME)</value>
  </data>
  <data name="CriticalQueryDigicheck" xml:space="preserve">
    <value>(WITH RESULT_TMP (PROJECT_ID, FORM_ID, TOTAL_NO, TOTAL_1ST, TOTAL_YES, TOTAL_1PLUS, PROJECTTYPE, MONTH_NAME) as (
	SELECT
		CRC.PROJECT_ID,
		CRC.FORM_ID,
		COUNT(CASE WHEN CRCD.CONFORM = 0 THEN 1 END) AS TOTAL_NO, -- no
		COUNT(CASE WHEN CRCD.CONFORM = 99 THEN 1 END) AS TOTAL_1ST, -- yes = 
		0 AS TOTAL_YES,
		COUNT(CASE WHEN CRCD.CONFORM = 1 THEN 1 END) AS TOTAL_1PLUS, -- pass at 1st
		'QAQC_CRITICAL_CHECK' AS PROJECTTYPE,
		'Summary' AS MONTH_NAME
	FROM SUBAPP_CRC CRC
	LEFT JOIN SUBAPP_CRC_CHECKLIST_DETAIL CRCD ON CRC.ID = CRCD.CRC_ID
	LEFT JOIN
		(SELECT CRC.FORM_ID,
				MAX(CRC.STAGE) AS STAGE
			FROM SUBAPP_CRC CRC
			WHERE CRC.IS_DELETED IS NOT TRUE
			GROUP BY CRC.FORM_ID) TMP ON CRC.FORM_ID = TMP.FORM_ID
	AND CRC.STAGE = TMP.STAGE
	WHERE CRC.IS_DELETED IS NOT TRUE
		AND CRCD.IS_DELETED IS NOT TRUE
		AND CRCD.IS_ACTIVE IS NOT FALSE
		AND @WHERECLAUSECRITICAL
	GROUP BY CRC.PROJECT_ID, CRC.FORM_ID
	ORDER BY CRC.FORM_ID
)
SELECT
	PROJECT_ID, 
	SUM(TOTAL_NO) AS TOTAL_NO, 
	SUM(TOTAL_1ST) AS TOTAL_1ST, 
	SUM(TOTAL_YES) AS TOTAL_YES, 
	SUM(TOTAL_1PLUS) AS TOTAL_1PLUS,
	SUM(TOTAL_NO + TOTAL_1ST + TOTAL_1PLUS) AS TOTAL, 
	PROJECTTYPE, 
	MONTH_NAME
FROM
	RESULT_TMP
GROUP BY PROJECT_ID, PROJECTTYPE, MONTH_NAME)</value>
  </data>
  <data name="DigicheckPPVCInProgressModules" xml:space="preserve">
    <value>SELECT
	SUM(RESULT_DATA.CASTING_COMPLETED) AS CASTING_COMPLETED,
	SUM(RESULT_DATA.CASTING_READY_DELIVERY) AS CASTING_READY_DELIVERY,
	SUM(RESULT_DATA.FITOUT_SENDING) AS FITOUT_SENDING,
	SUM(RESULT_DATA.PRE_STORAGE_COMPLETE) AS PRE_STORAGE_COMPLETE,
	SUM(RESULT_DATA.ON_SITE_RECEIVE) AS ON_SITE_RECEIVE,
	SUM(RESULT_DATA.ON_SITE_INSTALLED) AS ON_SITE_INSTALLED,
	UPDATED_AT
FROM (SELECT MP.ID,
	MP.NAME,
	MP.VOLUME,
	MP.REBAR_TONNAGE,
	F.GROUP,
	DATE_TRUNC('month', MS.UPDATED_AT) AS UPDATED_AT,
	COUNT(CASE
		WHEN (LOWER(FT.NAME) LIKE LOWER('%PPVC_S_03_Post Pour/Carcass completion%'))
			AND (MS.STATUS = 98 OR MS.STATUS = 99)
			AND LOWER(F.GROUP) LIKE '%casting%' THEN 1
		END) AS CASTING_COMPLETED,
	COUNT(CASE
		WHEN (LOWER(FT.NAME) LIKE LOWER('%PPVC_S_04_Shear Wall Roughening%'))
			AND (MS.STATUS = 98 OR MS.STATUS = 99)
			AND LOWER(F.GROUP) LIKE '%casting%' THEN 1
		END) AS CASTING_READY_DELIVERY,
	COUNT(CASE
		WHEN (LOWER(FT.NAME) LIKE LOWER('%PPVC_AFO_00_Start (Post Delivery AFO Yard)%'))
			AND (MS.STATUS = 98 OR MS.STATUS = 99)
			AND LOWER(F.GROUP) LIKE '%fit-out%' THEN 1
		END) AS FITOUT_SENDING,	
	COUNT(CASE
		WHEN (LOWER(FT.NAME) LIKE LOWER('%PPVC_PSD_Pre-Storage/Delivery Inspection Form%'))
			AND (MS.STATUS = 98 OR MS.STATUS = 99)
			AND LOWER(F.GROUP) LIKE '%pre-storage%' THEN 1
		END) AS PRE_STORAGE_COMPLETE,
	COUNT(CASE
		WHEN (LOWER(FT.NAME) LIKE LOWER('%PPVC_OnSite_01_Post-Deilvery%'))
			AND (MS.STATUS = 98 OR MS.STATUS = 99)
			AND LOWER(F.GROUP) LIKE '%on-site%' THEN 1
		END) AS ON_SITE_RECEIVE,
	COUNT(CASE
		WHEN (LOWER(FT.NAME) LIKE LOWER('%PPVC_OnSite_03_PPVC Module Installation%'))
			AND (MS.STATUS = 98 OR MS.STATUS = 99)
			AND LOWER(F.GROUP) LIKE '%on-site%' THEN 1
		END) AS ON_SITE_INSTALLED
FROM MODULE_PREFAB MP
FULL OUTER JOIN MODULE_STEP MS ON MS.MODULE_ID = MP.ID
FULL OUTER JOIN STEP S ON MS.STEP_ID = S.ID
FULL OUTER JOIN FLOW F ON S.FLOW_ID = F.ID
FULL OUTER JOIN FORM_TEMPLATE FT ON FT.ID = S.FORM_ID
WHERE LOWER(MP.PRECAST_TYPE) = 'ppvc'
	AND MP.IS_DELETED IS NOT TRUE
	AND MS.IS_DELETED IS NOT TRUE
	AND S.IS_DELETED IS NOT TRUE
	AND F.IS_DELETED IS NOT TRUE
	AND DATE_TRUNC('month', MS.UPDATED_AT) IS NOT NULL
	AND @WHERECLAUSE
GROUP BY MP.ID,
	F.GROUP,
	DATE_TRUNC('month', MS.UPDATED_AT)
ORDER BY MP.CREATED_AT) AS RESULT_DATA
GROUP BY UPDATED_AT;</value>
  </data>
  <data name="DigicheckPPVCInProgressModulesIncrease" xml:space="preserve">
    <value>WITH RESULT_ACTUAL (CASTING_COMPLETED, CASTING_READY_DELIVERY, FITOUT_SENDING, PRE_STORAGE_COMPLETE, ON_SITE_RECEIVE, ON_SITE_INSTALLED, UPDATED_AT) as (
	SELECT
		SUM(RESULT_DATA.CASTING_COMPLETED) AS CASTING_COMPLETED,
		SUM(RESULT_DATA.CASTING_READY_DELIVERY) AS CASTING_READY_DELIVERY,
		SUM(RESULT_DATA.FITOUT_SENDING) AS FITOUT_SENDING,
		SUM(RESULT_DATA.PRE_STORAGE_COMPLETE) AS PRE_STORAGE_COMPLETE,
		SUM(RESULT_DATA.ON_SITE_RECEIVE) AS ON_SITE_RECEIVE,
		SUM(RESULT_DATA.ON_SITE_INSTALLED) AS ON_SITE_INSTALLED,
		UPDATED_AT
	FROM (SELECT MP.ID,
		MP.NAME,
		MP.VOLUME,
		MP.REBAR_TONNAGE,
		F.GROUP,
		DATE_TRUNC('month', MS.UPDATED_AT) AS UPDATED_AT,
		COUNT(CASE
			WHEN (LOWER(FT.NAME) LIKE LOWER('%PPVC_S_03_Post Pour/Carcass completion%'))
				AND (MS.STATUS = 98 OR MS.STATUS = 99)
				AND LOWER(F.GROUP) LIKE '%casting%' THEN 1
			END) AS CASTING_COMPLETED,
		COUNT(CASE
			WHEN (LOWER(FT.NAME) LIKE LOWER('%PPVC_S_04_Shear Wall Roughening%'))
				AND (MS.STATUS = 98 OR MS.STATUS = 99)
				AND LOWER(F.GROUP) LIKE '%casting%' THEN 1
			END) AS CASTING_READY_DELIVERY,
		COUNT(CASE
			WHEN (LOWER(FT.NAME) LIKE LOWER('%PPVC_AFO_00_Start (Post Delivery AFO Yard)%'))
				AND (MS.STATUS = 98 OR MS.STATUS = 99)
				AND LOWER(F.GROUP) LIKE '%fit-out%' THEN 1
			END) AS FITOUT_SENDING,	
		COUNT(CASE
			WHEN (LOWER(FT.NAME) LIKE LOWER('%PPVC_PSD_Pre-Storage/Delivery Inspection Form%'))
				AND (MS.STATUS = 98 OR MS.STATUS = 99)
				AND LOWER(F.GROUP) LIKE '%pre-storage%' THEN 1
			END) AS PRE_STORAGE_COMPLETE,
		COUNT(CASE
			WHEN (LOWER(FT.NAME) LIKE LOWER('%PPVC_OnSite_01_Post-Deilvery%'))
				AND (MS.STATUS = 98 OR MS.STATUS = 99)
				AND LOWER(F.GROUP) LIKE '%on-site%' THEN 1
			END) AS ON_SITE_RECEIVE,
		COUNT(CASE
			WHEN (LOWER(FT.NAME) LIKE LOWER('%PPVC_OnSite_03_PPVC Module Installation%'))
				AND (MS.STATUS = 98 OR MS.STATUS = 99)
				AND LOWER(F.GROUP) LIKE '%on-site%' THEN 1
			END) AS ON_SITE_INSTALLED
	FROM MODULE_PREFAB MP
	FULL OUTER JOIN MODULE_STEP MS ON MS.MODULE_ID = MP.ID
	FULL OUTER JOIN STEP S ON MS.STEP_ID = S.ID
	FULL OUTER JOIN FLOW F ON S.FLOW_ID = F.ID
	FULL OUTER JOIN FORM_TEMPLATE FT ON FT.ID = S.FORM_ID
	WHERE LOWER(MP.PRECAST_TYPE) = 'ppvc'
		AND MP.IS_DELETED IS NOT TRUE
		AND MS.IS_DELETED IS NOT TRUE
		AND S.IS_DELETED IS NOT TRUE
		AND F.IS_DELETED IS NOT TRUE
		AND DATE_TRUNC('month', MS.UPDATED_AT) IS NOT NULL
		AND @WHERECLAUSE
	GROUP BY MP.ID,
		F.GROUP,
		DATE_TRUNC('month', MS.UPDATED_AT)
	ORDER BY MP.CREATED_AT) AS RESULT_DATA
	GROUP BY UPDATED_AT
)
SELECT 
	RA1.UPDATED_AT,
	SUM(RA2.CASTING_COMPLETED) AS CASTING_COMPLETED,
	SUM(RA2.CASTING_READY_DELIVERY) AS CASTING_READY_DELIVERY,
	SUM(RA2.FITOUT_SENDING) AS FITOUT_SENDING,
	SUM(RA2.PRE_STORAGE_COMPLETE) AS PRE_STORAGE_COMPLETE,
	SUM(RA2.ON_SITE_RECEIVE) AS ON_SITE_RECEIVE,
	SUM(RA2.ON_SITE_INSTALLED) AS ON_SITE_INSTALLED
FROM RESULT_ACTUAL AS RA1
INNER JOIN RESULT_ACTUAL AS RA2 ON RA1.UPDATED_AT &gt;= RA2.UPDATED_AT
GROUP BY 
	RA1.UPDATED_AT, 
	RA1.CASTING_COMPLETED,
	RA1.CASTING_READY_DELIVERY,
	RA1.FITOUT_SENDING,
	RA1.PRE_STORAGE_COMPLETE,
	RA1.ON_SITE_RECEIVE,
	RA1.ON_SITE_INSTALLED
ORDER BY RA1.UPDATED_AT;</value>
  </data>
  <data name="DigicheckPPVCInProgressModulesIncreaseV2" xml:space="preserve">
    <value>WITH RESULT_ACTUAL (CASTING_COMPLETED, CASTING_READY_DELIVERY, FITOUT_SENDING, PRE_STORAGE_COMPLETE, ON_SITE_RECEIVE, ON_SITE_INSTALLED, UPDATED_AT) as (
	SELECT
	SUM(RESULT_DATA.CASTING_COMPLETED) AS CASTING_COMPLETED,
	SUM(RESULT_DATA.CASTING_READY_DELIVERY) AS CASTING_READY_DELIVERY,
	SUM(RESULT_DATA.FITOUT_SENDING) AS FITOUT_SENDING,
	SUM(RESULT_DATA.PRE_STORAGE_COMPLETE) AS PRE_STORAGE_COMPLETE,
	SUM(RESULT_DATA.ON_SITE_RECEIVE) AS ON_SITE_RECEIVE,
	SUM(RESULT_DATA.ON_SITE_INSTALLED) AS ON_SITE_INSTALLED,
	UPDATED_AT
FROM (SELECT MP.ID,
		MP.NAME,
		MP.VOLUME,
		MP.REBAR_TONNAGE,
		DATE_TRUNC('month', MS.CREATED_AT) AS UPDATED_AT,
		-- Casting Completed
		COUNT(CASE
			WHEN LDS.NAME = 'aeCasting' AND LDS.FLOW_ID = @IDFLOWCASTING
				AND (MS.STATUS = 98 OR MS.STATUS = 99) THEN 1
			END) AS CASTING_COMPLETED,
		-- Ready for Delivery
		COUNT(CASE
			WHEN LDS.NAME = 'aeCasting' AND LDS.FLOW_ID = @IDFLOWCASTING
				AND (MS.STATUS = 98 OR MS.STATUS = 99) THEN 1
			END) AS CASTING_READY_DELIVERY,
		-- Sending to APSB(AFO)
		COUNT(CASE
			WHEN LDS.NAME = 'actualDeliveredFitout' AND LDS.FLOW_ID = @IDFLOWPRESTORAGE
				AND (MS.STATUS = 98 OR MS.STATUS = 99) THEN 1
			END) AS FITOUT_SENDING,	
		-- Delivered to Fit Out Completed
		COUNT(CASE
			WHEN LDS.NAME = 'actualDeliveredFitout' AND LDS.FLOW_ID = @IDFLOWPRESTORAGE
				AND (MS.STATUS = 98 OR MS.STATUS = 99) THEN 1
			END) AS DELIVERED_FITOUT_COMPLETED,
		-- Fit Out Completed
		COUNT(CASE
			WHEN LDS.NAME = 'actualFitoutCompleted' AND LDS.FLOW_ID = @IDFLOWONSITE
				AND (MS.STATUS = 98 OR MS.STATUS = 99) THEN 1
			END) AS PRE_STORAGE_COMPLETE,
		-- Ready for Delivery
		COUNT(CASE
			WHEN LDS.NAME = 'actualDeliveredSite' AND LDS.FLOW_ID = @IDFLOWONSITE
				AND (MS.STATUS = 98 OR MS.STATUS = 99) THEN 1
			END) AS ON_SITE_RECEIVE,
		COUNT(CASE
			WHEN LDS.NAME = 'aeInstallation' AND LDS.FLOW_ID = @IDFLOWONSITE
				AND (MS.STATUS = 98 OR MS.STATUS = 99) THEN 1
			END) AS ON_SITE_INSTALLED
	FROM MODULE_PREFAB MP
	FULL OUTER JOIN MODULE_STEP MS ON MS.MODULE_ID = MP.ID
	FULL OUTER JOIN STEP S ON MS.STEP_ID = S.ID
	FULL OUTER JOIN FLOW F ON S.FLOW_ID = F.ID
	FULL OUTER JOIN DASHBOARD_STATUS DS ON DS.ID = S.DASHBOARD_STATUS
	FULL OUTER JOIN LOG_DASHBOARD_STATUS LDS ON LDS.DASHBOARD_STATUS = DS.ID
	WHERE 
	  	LOWER(F.GROUP_1) = LOWER(@PRECAST_TYPE)
		AND REPLACE(REPLACE(LOWER(MP.PRECAST_TYPE), ' ', ''), '_', '') = LOWER(@PRECASTTYPE_HANDLE)
		AND MP.IS_DELETED IS NOT TRUE
		AND MS.IS_DELETED IS NOT TRUE
		AND S.IS_DELETED IS NOT TRUE
		AND DATE_TRUNC('month', MS.CREATED_AT) IS NOT NULL
		AND @WHERECLAUSE
	GROUP BY MP.ID,
		DATE_TRUNC('month', MS.CREATED_AT)
	ORDER BY MP.CREATED_AT) AS RESULT_DATA
	GROUP BY UPDATED_AT
)
SELECT 
	RA1.UPDATED_AT,
	SUM(RA2.CASTING_COMPLETED) AS CASTING_COMPLETED,
	SUM(RA2.CASTING_READY_DELIVERY) AS CASTING_READY_DELIVERY,
	SUM(RA2.FITOUT_SENDING) AS FITOUT_SENDING,
	SUM(RA2.PRE_STORAGE_COMPLETE) AS PRE_STORAGE_COMPLETE,
	SUM(RA2.ON_SITE_RECEIVE) AS ON_SITE_RECEIVE,
	SUM(RA2.ON_SITE_INSTALLED) AS ON_SITE_INSTALLED
FROM RESULT_ACTUAL AS RA1
INNER JOIN RESULT_ACTUAL AS RA2 ON RA1.UPDATED_AT &gt;= RA2.UPDATED_AT
GROUP BY 
	RA1.UPDATED_AT, 
	RA1.CASTING_COMPLETED,
	RA1.CASTING_READY_DELIVERY,
	RA1.FITOUT_SENDING,
	RA1.PRE_STORAGE_COMPLETE,
	RA1.ON_SITE_RECEIVE,
	RA1.ON_SITE_INSTALLED
ORDER BY RA1.UPDATED_AT;</value>
  </data>
  <data name="DigicheckPPVCInProgressModulesV2" xml:space="preserve">
    <value>SELECT
	SUM(RESULT_DATA.CASTING_COMPLETED) AS CASTING_COMPLETED,
	SUM(RESULT_DATA.CASTING_READY_DELIVERY) AS CASTING_READY_DELIVERY,
	SUM(RESULT_DATA.FITOUT_SENDING) AS FITOUT_SENDING,
	SUM(RESULT_DATA.PRE_STORAGE_COMPLETE) AS PRE_STORAGE_COMPLETE,
	SUM(RESULT_DATA.ON_SITE_RECEIVE) AS ON_SITE_RECEIVE,
	SUM(RESULT_DATA.ON_SITE_INSTALLED) AS ON_SITE_INSTALLED,
	UPDATED_AT
FROM (SELECT MP.ID,
	MP.NAME,
	MP.VOLUME,
	MP.REBAR_TONNAGE,
	DATE_TRUNC('month', MS.CREATED_AT) AS UPDATED_AT,
	-- Casting Completed
	COUNT(CASE
		WHEN LDS.NAME = 'aeCasting' AND LDS.FLOW_ID = @IDFLOWCASTING
			AND (MS.STATUS = 98 OR MS.STATUS = 99) THEN 1
		END) AS CASTING_COMPLETED,
	-- Ready for Delivery
	COUNT(CASE
		WHEN LDS.NAME = 'aeCasting' AND LDS.FLOW_ID = @IDFLOWCASTING
			AND (MS.STATUS = 98 OR MS.STATUS = 99) THEN 1
		END) AS CASTING_READY_DELIVERY,
	-- Sending to APSB(AFO)
	COUNT(CASE
		WHEN LDS.NAME = 'actualDeliveredFitout' AND LDS.FLOW_ID = @IDFLOWPRESTORAGE
			AND (MS.STATUS = 98 OR MS.STATUS = 99) THEN 1
		END) AS FITOUT_SENDING,	
	-- Delivered to Fit Out Completed
	COUNT(CASE
		WHEN LDS.NAME = 'actualDeliveredFitout' AND LDS.FLOW_ID = @IDFLOWPRESTORAGE
			AND (MS.STATUS = 98 OR MS.STATUS = 99) THEN 1
		END) AS DELIVERED_FITOUT_COMPLETED,
	-- Fit Out Completed
	COUNT(CASE
		WHEN LDS.NAME = 'actualFitoutCompleted' AND LDS.FLOW_ID = @IDFLOWONSITE
			AND (MS.STATUS = 98 OR MS.STATUS = 99) THEN 1
		END) AS PRE_STORAGE_COMPLETE,
	-- Ready for Delivery
	COUNT(CASE
		WHEN LDS.NAME = 'actualDeliveredSite' AND LDS.FLOW_ID = @IDFLOWONSITE
			AND (MS.STATUS = 98 OR MS.STATUS = 99) THEN 1
		END) AS ON_SITE_RECEIVE,
	COUNT(CASE
		WHEN LDS.NAME = 'aeInstallation' AND LDS.FLOW_ID = @IDFLOWONSITE
			AND (MS.STATUS = 98 OR MS.STATUS = 99) THEN 1
		END) AS ON_SITE_INSTALLED
FROM MODULE_PREFAB MP
FULL OUTER JOIN MODULE_STEP MS ON MS.MODULE_ID = MP.ID
FULL OUTER JOIN STEP S ON MS.STEP_ID = S.ID
FULL OUTER JOIN FLOW F ON S.FLOW_ID = F.ID
FULL OUTER JOIN DASHBOARD_STATUS DS ON DS.ID = S.DASHBOARD_STATUS
FULL OUTER JOIN LOG_DASHBOARD_STATUS LDS ON LDS.DASHBOARD_STATUS = DS.ID
WHERE 
	LOWER(F.GROUP_1) = LOWER(@PRECAST_TYPE)
	AND REPLACE(REPLACE(LOWER(MP.PRECAST_TYPE), ' ', ''), '_', '') = LOWER(@PRECASTTYPE_HANDLE)
	AND MP.IS_DELETED IS NOT TRUE
	AND MS.IS_DELETED IS NOT TRUE
	AND S.IS_DELETED IS NOT TRUE
	AND DATE_TRUNC('month', MS.UPDATED_AT) IS NOT NULL
	AND @WHERECLAUSE
GROUP BY MP.ID,
	DATE_TRUNC('month', MS.CREATED_AT)
ORDER BY MP.CREATED_AT) AS RESULT_DATA
GROUP BY UPDATED_AT;</value>
  </data>
  <data name="DigicheckPPVCProgressTable" xml:space="preserve">
    <value>SELECT DISTINCT 
	MP.ID, MP.NAME, MP.BLOCK, MP.LEVEL, MP.UNIT, SPLIT_PART(MP.NAME,'-', 5),
	CASE
		WHEN S.FLOW_ID = @IDFLOWONSITE AND LOWER(FT.NAME) LIKE LOWER('%PPVC_OnSite_03_PPVC Module Installation%') THEN 'installed'
		WHEN S.FLOW_ID = @IDFLOWONSITE AND (LOWER(FT.NAME) LIKE LOWER('%OnSite_01_Post-Deilvery%') OR LOWER(FT.NAME) LIKE LOWER('%PPVC_OnSite_01_Post-Deilvery%')) THEN 'delivered'
		WHEN S.FLOW_ID = @IDFLOWPRESTORAGE AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_PSD_Pre-Storage/Delivery Inspection%')) THEN 'fitout'
		WHEN S.FLOW_ID = @IDFLOWFITOUT AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_AFO_08A Rendering &amp;%')) THEN 'plastered'
		WHEN S.FLOW_ID = @IDFLOWCASTING AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_S_04_Shear Wall Roughening%')) THEN 'water'
		WHEN S.FLOW_ID = @IDFLOWCASTING AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_S_03_Post Pour/Carcass completion%')) THEN 'casting'
		WHEN S.FLOW_ID = @IDFLOWCASTING AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_S_01_Slab &amp; Wall Reinforcement%')) THEN 'casting'
		ELSE 'NaN'
	END AS FLOWTYPE,
	CASE
		WHEN S.FLOW_ID = @IDFLOWONSITE AND LOWER(FT.NAME) LIKE LOWER('%PPVC_OnSite_03_PPVC Module Installation%') THEN '1'
		WHEN S.FLOW_ID = @IDFLOWONSITE AND (LOWER(FT.NAME) LIKE LOWER('%OnSite_01_Post-Deilvery%') OR LOWER(FT.NAME) LIKE LOWER('%PPVC_OnSite_01_Post-Deilvery%')) THEN '2'
		WHEN S.FLOW_ID = @IDFLOWPRESTORAGE AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_PSD_Pre-Storage/Delivery Inspection%')) THEN '3'
		WHEN S.FLOW_ID = @IDFLOWFITOUT AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_AFO_08A Rendering &amp;%')) THEN '4'
		WHEN S.FLOW_ID = @IDFLOWCASTING AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_S_04_Shear Wall Roughening%')) THEN '5'
		WHEN S.FLOW_ID = @IDFLOWCASTING AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_S_03_Post Pour/Carcass completion%')) THEN '6'
		WHEN S.FLOW_ID = @IDFLOWCASTING AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_S_01_Slab &amp; Wall Reinforcement%')) THEN '7'
		ELSE '8'
	END AS FLOWTYPE_POSITION,
	MS.STATUS AS STATUS
FROM MODULE_PREFAB MP
LEFT JOIN MODULE_STEP MS ON MS.MODULE_ID = MP.ID
LEFT JOIN STEP S ON S.ID = MS.STEP_ID
LEFT JOIN FLOW F ON S.FLOW_ID = F.ID
LEFT JOIN FORM_TEMPLATE FT ON FT.ID = S.FORM_ID
WHERE 
	MP.IS_DELETED IS NOT TRUE
	AND LOWER(F.GROUP_1) = LOWER(@PRECAST_TYPE)
	AND REPLACE(REPLACE(LOWER(MP.PRECAST_TYPE), ' ', ''), '_', '') = LOWER(@PRECASTTYPE_HANDLE)
	AND MS.IS_DELETED IS NOT TRUE
	AND S.IS_DELETED IS NOT TRUE
	AND @WHERESQL
GROUP BY MP.ID,
	S.FLOW_ID,
	FT.NAME,
	MS.STATUS
ORDER BY MP.BLOCK,
	MP.LEVEL DESC,
	MP.UNIT,
	SPLIT_PART(MP.NAME,'-', 5),
	FLOWTYPE_POSITION;</value>
  </data>
  <data name="DigicheckPPVCProgressTableUnit" xml:space="preserve">
    <value>SELECT MP.BLOCK,
	MP.BLOCK_ID,
	MP.LEVEL,
	MP.LEVEL_ID,
	COUNT(DISTINCT MP.NAME) AS TOTAL_PPVC,
	-- 1. GET CASTING DATA PPVC CASTING S_03_Post Pour/Carcass Completion | S_01_Slab &amp; Wall Reinforcement | S_03_Post Pour/Carcass Completion
	MIN(CASE WHEN S.FLOW_ID = @IDFLOWCASTING AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_S_01_Slab &amp; Wall Reinforcement%')) THEN (MS.DUE_DATE) END) AS START_DATE_CASTING,
	MAX(CASE WHEN S.FLOW_ID = @IDFLOWCASTING AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_S_03_Post Pour/Carcass completion%')) THEN (MS.DUE_DATE) END) AS END_DATE_CASTING,
	COUNT(CASE WHEN S.FLOW_ID = @IDFLOWCASTING AND (MS.STATUS = 99 AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_S_03_Post Pour/Carcass completion%') OR LOWER(FT.NAME) LIKE LOWER('%Carcass Completion%'))) THEN MP.ID END) AS TOTAL_COMPLETE_CASTING,
	COUNT(CASE WHEN S.FLOW_ID = @IDFLOWCASTING AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_S_03_Post Pour/Carcass completion%') OR LOWER(FT.NAME) LIKE LOWER('%S_01_Slab &amp; Wall Reinforcement%')) THEN MP.ID END) AS TOTAL_CASTING,
	
	-- 2. GET WATER DATA PPVC CASTING S_04_Shear Wall Roughening
	COUNT(CASE WHEN S.FLOW_ID = @IDFLOWCASTING AND (MS.STATUS = 99 AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_S_04_Shear Wall Roughening%'))) THEN MP.ID END) AS TOTAL_COMPLETE_WATER,
	COUNT(CASE WHEN S.FLOW_ID = @IDFLOWCASTING AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_S_04_Shear Wall Roughening%')) THEN MP.ID END) AS TOTAL_WATER,
	
	-- 3. GET DATA PPVC FIT-OUT PPVC_AFO_08A Rendering &amp; Plastering
	COUNT(CASE WHEN S.FLOW_ID = @IDFLOWFITOUT AND (MS.STATUS = 99 AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_AFO_08A Rendering &amp;%'))) THEN MP.ID END) AS TOTAL_COMPLETE_PLASTERED,
	COUNT(CASE WHEN S.FLOW_ID = @IDFLOWFITOUT AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_AFO_08A Rendering &amp;%')) THEN MP.ID END) AS TOTAL_PLASTERED,
	
	-- 4. GET DATA PPVC_Pre-Storage | PPVC_PSD_Pre-Storage/Delivery Inspection | PPVC_PSD_Pre-storage/DeliveryInspection
	MIN(CASE WHEN S.FLOW_ID = @IDFLOWPRESTORAGE AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_PSD_Pre-Storage/Delivery Inspection%')) THEN (MS.DUE_DATE) END) AS START_DATE_FITOUT,
	MAX(CASE WHEN S.FLOW_ID = @IDFLOWPRESTORAGE AND (MS.STATUS = 99 AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_PSD_Pre-Storage/Delivery Inspection%'))) THEN (MS.DUE_DATE) END) AS END_DATE_FITOUT,
	COUNT(CASE WHEN S.FLOW_ID = @IDFLOWPRESTORAGE AND (MS.STATUS = 99 AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_PSD_Pre-Storage/Delivery Inspection%'))) THEN MP.ID END) AS TOTAL_COMPLETE_FITOUT,
	COUNT(CASE WHEN S.FLOW_ID = @IDFLOWPRESTORAGE AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_PSD_Pre-Storage/Delivery Inspection%')) THEN MP.ID END) AS TOTAL_FITOUT,
	
	-- 5. GET DATA PPVC_Pre-Storage | PPVC_PSD_Pre-Storage/Delivery Inspection | PPVC_PSD_Pre-storage/DeliveryInspection
	MIN(CASE WHEN S.FLOW_ID = @IDFLOWONSITE AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_OnSite_01_Post-Deilvery%')) THEN (MS.DUE_DATE) END) AS START_DATE_DELIVERED,
	MAX(CASE WHEN S.FLOW_ID = @IDFLOWONSITE AND (MS.STATUS = 99 AND LOWER(FT.NAME) LIKE LOWER('%PPVC_OnSite_01_Post-Deilvery%')) THEN (MS.DUE_DATE) END) AS END_DATE_DELIVERED,
	COUNT(CASE WHEN S.FLOW_ID = @IDFLOWONSITE AND (MS.STATUS = 99 AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_OnSite_01_Post-Deilvery%'))) THEN MP.ID END) AS TOTAL_COMPLETE_DELIVERED,
	COUNT(CASE WHEN S.FLOW_ID = @IDFLOWONSITE AND ((LOWER(FT.NAME) LIKE LOWER('%PPVC_OnSite_01_Post-Deilvery%'))) THEN MP.ID END) AS TOTAL_DELIVERED,
	
	-- 6. GET DATA INSTALLED PPVC_OnSite | PPVC_OnSite_03_PPVC Module Installation 
	MIN(CASE WHEN S.FLOW_ID = @IDFLOWONSITE AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_OnSite_03_PPVC Module Installation%')) THEN (MS.DUE_DATE) END) AS START_DATE_INSTALLED,
	MAX(CASE WHEN S.FLOW_ID = @IDFLOWONSITE AND (MS.STATUS = 99 AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_OnSite_03_PPVC Module Installation%'))) THEN (MS.DUE_DATE) END) AS END_DATE_INSTALLED,
	COUNT(CASE WHEN S.FLOW_ID = @IDFLOWONSITE AND (MS.STATUS = 99 AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_OnSite_03_PPVC Module Installation%'))) THEN MP.ID END) AS TOTAL_COMPLETE_INSTALLED,
	COUNT(CASE WHEN S.FLOW_ID = @IDFLOWONSITE AND (LOWER(FT.NAME) LIKE LOWER('%PPVC_OnSite_03_PPVC Module Installation%')) THEN MP.ID END) AS TOTAL_INSTALLED
	
FROM MODULE_PREFAB MP
LEFT JOIN MODULE_STEP MS ON MS.MODULE_ID = MP.ID
LEFT JOIN STEP S ON S.ID = MS.STEP_ID
LEFT JOIN FLOW F ON S.FLOW_ID = F.ID
LEFT JOIN FORM_TEMPLATE FT ON FT.ID = S.FORM_ID
WHERE 
	MP.IS_DELETED IS NOT TRUE
	AND LOWER(F.GROUP_1) = LOWER(@PRECAST_TYPE)
	AND REPLACE(REPLACE(LOWER(MP.PRECAST_TYPE), ' ', ''), '_', '') = LOWER(@PRECASTTYPE_HANDLE)
	AND MS.IS_DELETED IS NOT TRUE
	AND S.IS_DELETED IS NOT TRUE
	AND @WHERESQL
GROUP BY MP.BLOCK,
	MP.BLOCK_ID,
	MP.LEVEL,
	MP.LEVEL_ID
ORDER BY MP.BLOCK,
	MP.LEVEL DESC;</value>
  </data>
  <data name="DigicheckPPVCTotalM3Rebar" xml:space="preserve">
    <value>SELECT SUM(CASE WHEN LOWER(RESULT_QUERY.GROUP) LIKE '%casting%' THEN RESULT_QUERY.VOLUME ELSE 0 END) AS TOTAL_VOLUME_CASTING_COMPLETED,
	SUM(RESULT_QUERY.VOLUME) AS TOTAL_VOLUMES,
	SUM(RESULT_QUERY.REBAR_TONNAGE) AS TOTAL_REBAR_TONNAGE,
	SUM(CASE WHEN LOWER(RESULT_QUERY.GROUP) LIKE '%casting%' THEN RESULT_QUERY.REBAR_TONNAGE ELSE 0 END) AS TOTAL_TOTAL_REBAR_TONNAGE_CASTING_COMPLETED
FROM
	(SELECT MP.ID,
			MP.NAME,
			MP.VOLUME,
			MP.REBAR_TONNAGE,
			F.GROUP,
			 COUNT( CASE WHEN (LOWER(FT.NAME) LIKE LOWER('%PPVC_S_03_Post Pour/Carcass completion%')) 
					AND (MS.STATUS = 98 OR MS.STATUS = 99) 
					AND LOWER(F.GROUP) LIKE '%casting%' THEN 1 END) AS TOTAL_COMPLETED_MODULE,
			COUNT(DISTINCT MP.NAME) AS TOTAL_MODULES
		FROM MODULE_PREFAB MP
		FULL OUTER JOIN MODULE_STEP MS ON MS.MODULE_ID = MP.ID
		FULL OUTER JOIN STEP S ON MS.STEP_ID = S.ID
		FULL OUTER JOIN FLOW F ON S.FLOW_ID = F.ID
		FULL OUTER JOIN FORM_TEMPLATE FT ON FT.ID = S.FORM_ID
		WHERE LOWER(MP.PRECAST_TYPE) = 'ppvc'
			AND MP.IS_DELETED IS NOT TRUE
			AND MS.IS_DELETED IS NOT TRUE
			AND S.IS_DELETED IS NOT TRUE
			AND F.IS_DELETED IS NOT TRUE
	 		AND @WHERECLAUSE
		GROUP BY MP.ID,
			F.GROUP
		ORDER BY MP.CREATED_AT) AS RESULT_QUERY;</value>
  </data>
  <data name="DigicheckPPVCTotalM3RebarV2" xml:space="preserve">
    <value>-- DigicheckPPVCTotalM3RebarV2
SELECT 
	SUM(CASE WHEN LOWER(RESULT_QUERY.GROUP) LIKE '%casting%' THEN RESULT_QUERY.VOLUME ELSE 0 END) AS TOTAL_VOLUME_CASTING_COMPLETED,
	SUM(RESULT_QUERY.VOLUME) AS TOTAL_VOLUMES,
	SUM(RESULT_QUERY.REBAR_TONNAGE) AS TOTAL_REBAR_TONNAGE,
	SUM(CASE WHEN LOWER(RESULT_QUERY.GROUP) LIKE '%casting%' THEN RESULT_QUERY.REBAR_TONNAGE ELSE 0 END) AS TOTAL_TOTAL_REBAR_TONNAGE_CASTING_COMPLETED
FROM
	(SELECT MP.ID,
			MP.NAME,
			MP.VOLUME,
			MP.REBAR_TONNAGE,
			F.GROUP,
	 		COUNT(CASE 
				 WHEN LDS.NAME = 'aeCasting' 
				  AND LDS.FLOW_ID = @IDFLOWCASTING 
				  AND (MS.STATUS IN (98, 99)) THEN 1 END) AS TOTAL_COMPLETED_MODULE,
			COUNT(DISTINCT MP.NAME) AS TOTAL_MODULES
		FROM MODULE_PREFAB MP
		LEFT JOIN MODULE_STEP MS ON MS.MODULE_ID = MP.ID
		LEFT JOIN STEP S ON MS.STEP_ID = S.ID
		LEFT JOIN FLOW F ON S.FLOW_ID = F.ID
        LEFT JOIN DASHBOARD_STATUS DS ON DS.ID = S.DASHBOARD_STATUS
        LEFT JOIN LOG_DASHBOARD_STATUS LDS ON LDS.DASHBOARD_STATUS = DS.ID
		WHERE
	 		LOWER(F.GROUP_1) = LOWER(@PRECAST_TYPE)
			AND REPLACE(REPLACE(LOWER(MP.PRECAST_TYPE), ' ', ''), '_', '') = LOWER(@PRECASTTYPE_HANDLE)
			AND MP.IS_DELETED IS NOT TRUE
	 		AND @WHERECLAUSE
		GROUP BY MP.ID, F.GROUP
		ORDER BY MP.CREATED_AT) AS RESULT_QUERY;</value>
  </data>
  <data name="DigicheckPPVCTotalModules" xml:space="preserve">
    <value>SELECT
	COUNT( CASE WHEN (LOWER(FT.NAME) LIKE LOWER('%PPVC_S_03_Post Pour/Carcass completion%')) 
			AND (MS.STATUS = 98 OR MS.STATUS = 99) 
			AND LOWER(F.GROUP) LIKE '%casting%' THEN 1 END) AS TOTAL_COMPLETED_MODULE,
	COUNT(DISTINCT MP.NAME) AS TOTAL_MODULES
FROM MODULE_PREFAB MP
FULL OUTER JOIN MODULE_STEP MS ON MS.MODULE_ID = MP.ID
FULL OUTER JOIN STEP S ON MS.STEP_ID = S.ID
FULL OUTER JOIN FLOW F ON S.FLOW_ID = F.ID
FULL OUTER JOIN FORM_TEMPLATE FT ON FT.ID = S.FORM_ID
WHERE
	MP.PRECAST_TYPE = 'PPVC'
	AND MP.IS_DELETED IS NOT TRUE
	AND MS.IS_DELETED IS NOT TRUE
	AND S.IS_DELETED IS NOT TRUE
	AND F.IS_DELETED IS NOT TRUE
	AND @WHERECLAUSE;</value>
  </data>
  <data name="DigicheckPPVCTotalModulesV2" xml:space="preserve">
    <value>-- DigicheckPPVCTotalModulesV2
WITH filtered_modules AS (
    SELECT 
		DISTINCT MP.ID,
		MP.UPDATED_AT
    FROM 
		MODULE_PREFAB MP
    WHERE 
		MP.IS_DELETED IS NOT TRUE
    	AND LOWER(REPLACE(REPLACE(MP.PRECAST_TYPE, ' ', ''), '_', '')) = LOWER(@PRECASTTYPE_HANDLE)
		AND @WHERECLAUSE
),
filtered_steps AS (
    SELECT 
		DISTINCT MS.MODULE_ID, MS.STATUS, F.ID, S.DASHBOARD_STATUS, F.GROUP_1
    FROM 
		MODULE_STEP MS
    LEFT JOIN STEP S ON MS.STEP_ID = S.ID
	LEFT JOIN FLOW F ON S.FLOW_ID = F.ID
    WHERE 
		MS.IS_DELETED IS NOT TRUE
		AND LOWER(F.GROUP_1) = LOWER(@PRECAST_TYPE)
    	AND S.IS_DELETED IS NOT TRUE
),
log_status AS (
    SELECT 
		LDS.DASHBOARD_STATUS, LDS.NAME, LDS.FLOW_ID
    FROM 
		LOG_DASHBOARD_STATUS LDS
    WHERE 
		LDS.NAME = 'aeCasting'
    	AND LDS.FLOW_ID = @IDFLOWCASTING
)
SELECT
    COUNT(CASE
        WHEN ls.NAME = 'aeCasting'
            AND (fs.STATUS = 98 OR fs.STATUS = 99) 
		  	@WHEREDATE
		  	THEN 1
        END) AS TOTAL_COMPLETED_MODULE,
    COUNT(DISTINCT MP.ID) AS TOTAL_MODULES
FROM 
	filtered_modules MP
LEFT JOIN filtered_steps fs ON fs.MODULE_ID = MP.ID
LEFT JOIN log_status ls ON ls.DASHBOARD_STATUS = fs.DASHBOARD_STATUS;</value>
  </data>
  <data name="DigicheckProgressTable" xml:space="preserve">
    <value>SELECT 
	DISTINCT MP.ID, MP.NAME, MP.BLOCK, MP.LEVEL, MP.UNIT, SPLIT_PART(MP.NAME,'-', 5),
	CASE
		WHEN S.FLOW_ID = @IDFLOWONSITE AND LDS.NAME = 'aeInstallation' THEN 'installed'
		WHEN S.FLOW_ID = @IDFLOWONSITE AND LDS.NAME = 'actualDeliveredSite' THEN 'delivered'
		WHEN S.FLOW_ID = @IDFLOWPRESTORAGE AND LDS.NAME = 'actualDeliveredFitout' THEN 'fitout'
		WHEN S.FLOW_ID = @IDFLOWCASTING AND LDS.NAME = 'aeCasting' THEN 'casting'
		ELSE 'NaN'
	END AS FLOWTYPE,
	CASE
		WHEN S.FLOW_ID = @IDFLOWONSITE AND LDS.NAME = 'aeInstallation' THEN '1'
		WHEN S.FLOW_ID = @IDFLOWONSITE AND LDS.NAME = 'actualDeliveredSite' THEN '2'
		WHEN S.FLOW_ID = @IDFLOWPRESTORAGE AND LDS.NAME = 'actualDeliveredFitout' THEN '3'
		WHEN S.FLOW_ID = @IDFLOWCASTING AND LDS.NAME = 'aeCasting' THEN '4'
		ELSE '5'
	END AS FLOWTYPE_POSITION,
	MS.STATUS AS STATUS
FROM MODULE_PREFAB MP
LEFT JOIN MODULE_STEP MS ON MS.MODULE_ID = MP.ID
LEFT JOIN STEP S ON S.ID = MS.STEP_ID
LEFT JOIN FLOW F ON S.FLOW_ID = F.ID
LEFT JOIN DASHBOARD_STATUS DS ON DS.ID = S.DASHBOARD_STATUS
LEFT JOIN LOG_DASHBOARD_STATUS LDS ON LDS.DASHBOARD_STATUS = DS.ID
WHERE 
	MP.IS_DELETED IS NOT TRUE
	AND LOWER(F.GROUP_1) = LOWER(@PRECAST_TYPE)
	AND REPLACE(REPLACE(LOWER(MP.PRECAST_TYPE), ' ', ''), '_', '') = LOWER(@PRECASTTYPE_HANDLE)
	AND MS.IS_DELETED IS NOT TRUE
	AND S.IS_DELETED IS NOT TRUE
	AND @WHERESQL
GROUP BY MP.ID,
	S.FLOW_ID,
	LDS.NAME,
	MS.STATUS
ORDER BY MP.BLOCK,
	MP.LEVEL DESC,
	MP.UNIT,
	SPLIT_PART(MP.NAME,'-', 5),
	FLOWTYPE_POSITION;</value>
  </data>
  <data name="DigicheckProgressTableUnit" xml:space="preserve">
    <value>SELECT MP.BLOCK,
	MP.BLOCK_ID,
	MP.LEVEL,
	MP.LEVEL_ID,
	COUNT(DISTINCT MP.NAME) AS TOTAL_PPVC,
	-- 1. GET CASTING DATA PPVC CASTING S_03_Post Pour/Carcass Completion | S_01_Slab &amp; Wall Reinforcement | S_03_Post Pour/Carcass Completion
	MIN(CASE WHEN LDS.NAME = 'asCasting' AND LDS.FLOW_ID = @IDFLOWCASTING THEN (MS.DUE_DATE) END) AS START_DATE_CASTING,
	MAX(CASE WHEN LDS.NAME = 'aeCasting' AND LDS.FLOW_ID = @IDFLOWCASTING THEN (MS.DUE_DATE) END) AS END_DATE_CASTING,
	COUNT(CASE WHEN LDS.NAME = 'aeCasting' AND LDS.FLOW_ID = @IDFLOWCASTING AND MS.STATUS = 99 THEN MP.ID END) AS TOTAL_COMPLETE_CASTING,
	COUNT(CASE WHEN (LDS.NAME = 'asCasting' OR LDS.NAME = 'aeCasting') AND LDS.FLOW_ID = @IDFLOWCASTING THEN MP.ID END) AS TOTAL_CASTING,
	
	-- 2. GET DATA PPVC_Pre-Storage | PPVC_PSD_Pre-Storage/Delivery Inspection | PPVC_PSD_Pre-storage/DeliveryInspection
	MIN(CASE WHEN LDS.NAME = 'actualDeliveredFitout' AND LDS.FLOW_ID = @IDFLOWPRESTORAGE THEN (MS.DUE_DATE) END) AS START_DATE_FITOUT,
	MAX(CASE WHEN LDS.NAME = 'actualFitoutCompleted' AND LDS.FLOW_ID = @IDFLOWPRESTORAGE AND MS.STATUS = 99 THEN (MS.DUE_DATE) END) AS END_DATE_FITOUT,
	COUNT(CASE WHEN LDS.NAME = 'actualFitoutCompleted' AND LDS.FLOW_ID = @IDFLOWPRESTORAGE AND MS.STATUS = 99 THEN MP.ID END) AS TOTAL_COMPLETE_FITOUT,
	COUNT(CASE WHEN (LDS.NAME = 'actualDeliveredFitout' OR LDS.NAME = 'actualFitoutCompleted') AND LDS.FLOW_ID = @IDFLOWPRESTORAGE THEN MP.ID END) AS TOTAL_FITOUT,
	
	-- 3. GET DATA PPVC_Pre-Storage | PPVC_PSD_Pre-Storage/Delivery Inspection | PPVC_PSD_Pre-storage/DeliveryInspection
	MIN(CASE WHEN LDS.NAME = 'actualDeliveredSite' AND LDS.FLOW_ID = @IDFLOWONSITE THEN (MS.DUE_DATE) END) AS START_DATE_DELIVERED,
	MAX(CASE WHEN LDS.NAME = 'actualDeliveredSite' AND LDS.FLOW_ID = @IDFLOWONSITE AND MS.STATUS = 99 THEN (MS.DUE_DATE) END) AS END_DATE_DELIVERED,
	COUNT(CASE WHEN LDS.NAME = 'actualDeliveredSite' AND LDS.FLOW_ID = @IDFLOWONSITE AND MS.STATUS = 99 THEN MP.ID END) AS TOTAL_COMPLETE_DELIVERED,
	COUNT(CASE WHEN LDS.NAME = 'actualDeliveredSite' AND LDS.FLOW_ID = @IDFLOWONSITE THEN MP.ID END) AS TOTAL_DELIVERED,
	
	-- 4. GET DATA INSTALLED PPVC_OnSite | PPVC_OnSite_03_PPVC Module Installation 
	MIN(CASE WHEN LDS.NAME = 'asInstallation' AND LDS.FLOW_ID = @IDFLOWONSITE THEN (MS.DUE_DATE) END) AS START_DATE_INSTALLED,
	MAX(CASE WHEN LDS.NAME = 'aeInstallation' AND LDS.FLOW_ID = @IDFLOWONSITE AND MS.STATUS = 99 THEN (MS.DUE_DATE) END) AS END_DATE_INSTALLED,
	COUNT(CASE WHEN LDS.NAME = 'aeInstallation' AND LDS.FLOW_ID = @IDFLOWONSITE AND MS.STATUS = 99 THEN MP.ID END) AS TOTAL_COMPLETE_INSTALLED,
	COUNT(CASE WHEN (LDS.NAME = 'asInstallation' OR LDS.NAME = 'aeInstallation') AND LDS.FLOW_ID = @IDFLOWONSITE THEN MP.ID END) AS TOTAL_INSTALLED
	
FROM MODULE_PREFAB MP
LEFT JOIN MODULE_STEP MS ON MS.MODULE_ID = MP.ID
LEFT JOIN STEP S ON S.ID = MS.STEP_ID
LEFT JOIN FLOW F ON S.FLOW_ID = F.ID
LEFT JOIN DASHBOARD_STATUS DS ON DS.ID = S.DASHBOARD_STATUS
LEFT JOIN LOG_DASHBOARD_STATUS LDS ON LDS.DASHBOARD_STATUS = DS.ID
WHERE 
	MP.IS_DELETED IS NOT TRUE
	AND LOWER(F.GROUP_1) = LOWER(@PRECAST_TYPE)
	AND REPLACE(REPLACE(LOWER(MP.PRECAST_TYPE), ' ', ''), '_', '') = LOWER(@PRECASTTYPE_HANDLE)
	AND MS.IS_DELETED IS NOT TRUE
	AND S.IS_DELETED IS NOT TRUE
	AND @WHERESQL
GROUP BY MP.BLOCK,
	MP.BLOCK_ID,
	MP.LEVEL,
	MP.LEVEL_ID
ORDER BY MP.BLOCK,
	MP.LEVEL DESC;</value>
  </data>
  <data name="QAQCCommonGroupByTradeSubTrade" xml:space="preserve">
    <value>WITH RESULT_TMP (CHECKLIST_ID, PROJECT_ID, TRADE, TOTAL_NO, TOTAL_1ST, TOTAL_YES, TOTAL_1PLUS, TOTAL_NA, CREATED_AT) as (
	SELECT
		CCD.CHECKLIST_ID,
		CC.PROJECT_ID,
		CC.TRADE,
		COUNT(CASE WHEN CCD.CONFORM = 0 THEN 1 END) AS TOTAL_NO, -- no
		0 AS TOTAL_1ST, -- yes = 
		COUNT(CASE WHEN CCD.CONFORM = 99 THEN 1 END) AS TOTAL_YES,
		0 AS TOTAL_1PLUS,
		COUNT(CASE WHEN CCD.CONFORM = 1 THEN 1 END) AS TOTAL_NA,
		CC.CREATED_AT
	FROM SUBAPP_CC CC
	LEFT JOIN SUBAPP_CC_CHECKLIST_DETAIL CCD ON CC.ID = CCD.CC_ID
	WHERE CC.IS_DELETED IS NOT TRUE
		AND CCD.IS_DELETED IS NOT TRUE
		AND CCD.IS_ACTIVE IS NOT FALSE
	GROUP BY 
		CC.PROJECT_ID, 
		CCD.CHECKLIST_ID, 
		TRADE, 
		CC.CREATED_AT
)
SELECT
	RT.TRADE,
	RT.TRADE AS DISCIPLINE,
	ST.SUB_TRADE,
	ST.SUB_TRADE AS SHORT_NAME,
	SUM(TOTAL_NO) AS TOTAL_NO, 
	SUM(TOTAL_1ST) AS TOTAL_1ST, 
	SUM(TOTAL_YES) AS TOTAL_YES, 
	SUM(TOTAL_1PLUS) AS TOTAL_1PLUS,
	SUM(TOTAL_NA) AS TOTAL_NA,
	SUM(TOTAL_NO + TOTAL_1ST + TOTAL_1PLUS) AS TOTAL
FROM
	RESULT_TMP RT
LEFT JOIN SUBAPP_CC_CHECK_LIST CCC
ON CCC.ID = RT.CHECKLIST_ID
LEFT JOIN SUBAPP_SUB_TRADE ST
ON ST.ID = CCC.SUB_TRADE_ID
WHERE @WHERECLAUSE AND ST.SUB_TRADE IS NOT NULL
GROUP BY RT.TRADE, ST.SUB_TRADE;</value>
  </data>
  <data name="QAQCCommonGroupByTradeSubTradeChecklist" xml:space="preserve">
    <value>WITH RESULT_TMP (CHECKLIST_ID, PROJECT_ID, TRADE, TOTAL_NO, TOTAL_1ST, TOTAL_YES, TOTAL_1PLUS, TOTAL_NA, CREATED_AT) as (
	SELECT
		CCD.CHECKLIST_ID,
		CC.PROJECT_ID,
		CC.TRADE,
		COUNT(CASE WHEN CCD.CONFORM = 0 THEN 1 END) AS TOTAL_NO, -- no
		0 AS TOTAL_1ST, -- yes = 
		COUNT(CASE WHEN CCD.CONFORM = 99 THEN 1 END) AS TOTAL_YES,
		0 AS TOTAL_1PLUS,
		COUNT(CASE WHEN CCD.CONFORM = 1 THEN 1 END) AS TOTAL_NA,
		CC.CREATED_AT
	FROM SUBAPP_CC CC
	LEFT JOIN SUBAPP_CC_CHECKLIST_DETAIL CCD ON CC.ID = CCD.CC_ID
	WHERE CC.IS_DELETED IS NOT TRUE
		AND CCD.IS_DELETED IS NOT TRUE
		AND CCD.IS_ACTIVE IS NOT FALSE
	GROUP BY 
		CC.PROJECT_ID, 
		CCD.CHECKLIST_ID, 
		TRADE, 
		CC.CREATED_AT
)
SELECT
	RT.TRADE,
	RT.TRADE AS DISCIPLINE,
	ST.SUB_TRADE,
	ST.SUB_TRADE AS SHORT_NAME,
	CCC.CHECK_LIST,
	CCC.STAGE,
	SUM(TOTAL_NO) AS TOTAL_NO, 
	SUM(TOTAL_1ST) AS TOTAL_1ST, 
	SUM(TOTAL_YES) AS TOTAL_YES, 
	SUM(TOTAL_1PLUS) AS TOTAL_1PLUS,
	SUM(TOTAL_NA) AS TOTAL_NA,
	SUM(TOTAL_NO + TOTAL_1ST + TOTAL_1PLUS) AS TOTAL
FROM
	RESULT_TMP RT
LEFT JOIN SUBAPP_CC_CHECK_LIST CCC
ON CCC.ID = RT.CHECKLIST_ID
LEFT JOIN SUBAPP_SUB_TRADE ST
ON ST.ID = CCC.SUB_TRADE_ID
WHERE @WHERECLAUSE
GROUP BY RT.TRADE, ST.SUB_TRADE, CCC.CHECK_LIST, CCC.STAGE;</value>
  </data>
  <data name="QAQCCommonGroupByTradeSubTradePerMonth" xml:space="preserve">
    <value>WITH RESULT_TMP (CHECKLIST_ID, PROJECT_ID, TRADE, TOTAL_NO, TOTAL_1ST, TOTAL_YES, TOTAL_1PLUS, TOTAL_NA, CREATED_AT) as (
	SELECT
		CCD.CHECKLIST_ID,
		CC.PROJECT_ID,
		CC.TRADE,
		COUNT(CASE WHEN CCD.CONFORM = 0 THEN 1 END) AS TOTAL_NO, -- no
		0 AS TOTAL_1ST, -- yes = 
		COUNT(CASE WHEN CCD.CONFORM = 99 THEN 1 END) AS TOTAL_YES,
		0 AS TOTAL_1PLUS,
		COUNT(CASE WHEN CCD.CONFORM = 1 THEN 1 END) AS TOTAL_NA,
		CC.CREATED_AT
	FROM SUBAPP_CC CC
	LEFT JOIN SUBAPP_CC_CHECKLIST_DETAIL CCD ON CC.ID = CCD.CC_ID
	WHERE CC.IS_DELETED IS NOT TRUE
		AND CCD.IS_DELETED IS NOT TRUE
		AND CCD.IS_ACTIVE IS NOT FALSE
	GROUP BY 
		CC.PROJECT_ID, 
		CCD.CHECKLIST_ID, 
		TRADE, 
		CC.CREATED_AT
)
SELECT
	TO_CHAR(RT.CREATED_AT, 'MM-YY') AS PER_MONTH,
	ST.SUB_TRADE,
	SUM(TOTAL_NO) AS TOTAL_NO, 
	SUM(TOTAL_1ST) AS TOTAL_1ST, 
	SUM(TOTAL_YES) AS TOTAL_YES, 
	SUM(TOTAL_1PLUS) AS TOTAL_1PLUS,
	SUM(TOTAL_NA) AS TOTAL_NA,
	SUM(TOTAL_NO + TOTAL_1ST + TOTAL_1PLUS) AS TOTAL
FROM
	RESULT_TMP RT
LEFT JOIN SUBAPP_CC_CHECK_LIST CCC
ON CCC.ID = RT.CHECKLIST_ID
LEFT JOIN SUBAPP_SUB_TRADE ST
ON ST.ID = CCC.SUB_TRADE_ID
WHERE @WHERECLAUSE
GROUP BY TO_CHAR(RT.CREATED_AT, 'MM-YY'), TO_CHAR(RT.CREATED_AT, 'MM'), TO_CHAR(RT.CREATED_AT, 'YY'), ST.SUB_TRADE
ORDER BY TO_CHAR(RT.CREATED_AT, 'YY'), TO_CHAR(RT.CREATED_AT, 'MM');

WITH RESULT_TMP (CHECKLIST_ID, PROJECT_ID, TRADE, TOTAL_NO, TOTAL_1ST, TOTAL_YES, TOTAL_1PLUS, TOTAL_NA, CREATED_AT) as (
	SELECT
		CCD.CHECKLIST_ID,
		CC.PROJECT_ID,
		CC.TRADE,
		COUNT(CASE WHEN CCD.CONFORM = 0 THEN 1 END) AS TOTAL_NO, -- no
		0 AS TOTAL_1ST, -- yes = 
		COUNT(CASE WHEN CCD.CONFORM = 99 THEN 1 END) AS TOTAL_YES,
		0 AS TOTAL_1PLUS,
		COUNT(CASE WHEN CCD.CONFORM = 1 THEN 1 END) AS TOTAL_NA,
		CC.CREATED_AT
	FROM SUBAPP_CC CC
	LEFT JOIN SUBAPP_CC_CHECKLIST_DETAIL CCD ON CC.ID = CCD.CC_ID
	WHERE CC.IS_DELETED IS NOT TRUE
		AND CCD.IS_DELETED IS NOT TRUE
		AND CCD.IS_ACTIVE IS NOT FALSE
	GROUP BY 
		CC.PROJECT_ID, 
		CCD.CHECKLIST_ID, 
		TRADE, 
		CC.CREATED_AT
)
SELECT
	ST.SUB_TRADE AS KEY,
	ST.SUB_TRADE AS TRADE_FULL_NAME,
	'' AS COLOR
FROM
	RESULT_TMP RT
LEFT JOIN SUBAPP_CC_CHECK_LIST CCC
ON CCC.ID = RT.CHECKLIST_ID
LEFT JOIN SUBAPP_SUB_TRADE ST
ON ST.ID = CCC.SUB_TRADE_ID
WHERE @WHERECLAUSE
GROUP BY ST.SUB_TRADE;</value>
  </data>
  <data name="QAQCCommonGroupByTradeSubTradePerProject" xml:space="preserve">
    <value>WITH RESULT_TMP (CHECKLIST_ID, PROJECT_ID, TRADE, TOTAL_NO, TOTAL_1ST, TOTAL_YES, TOTAL_1PLUS, TOTAL_NA, CREATED_AT) as (
	SELECT
		CCD.CHECKLIST_ID,
		CC.PROJECT_ID,
		CC.TRADE,
		COUNT(CASE WHEN CCD.CONFORM = 0 THEN 1 END) AS TOTAL_NO, -- no
		0 AS TOTAL_1ST, -- yes = 
		COUNT(CASE WHEN CCD.CONFORM = 99 THEN 1 END) AS TOTAL_YES,
		0 AS TOTAL_1PLUS,
		COUNT(CASE WHEN CCD.CONFORM = 1 THEN 1 END) AS TOTAL_NA,
		CC.CREATED_AT
	FROM SUBAPP_CC CC
	LEFT JOIN SUBAPP_CC_CHECKLIST_DETAIL CCD ON CC.ID = CCD.CC_ID
	WHERE CC.IS_DELETED IS NOT TRUE
		AND CCD.IS_DELETED IS NOT TRUE
		AND CCD.IS_ACTIVE IS NOT FALSE
	GROUP BY 
		CC.PROJECT_ID, 
		CCD.CHECKLIST_ID, 
		TRADE, 
		CC.CREATED_AT
)
SELECT
	PROJECT_ID,
	ST.SUB_TRADE,
	SUM(TOTAL_NO) AS TOTAL_NO, 
	SUM(TOTAL_1ST) AS TOTAL_1ST, 
	SUM(TOTAL_YES) AS TOTAL_YES, 
	SUM(TOTAL_1PLUS) AS TOTAL_1PLUS,
	SUM(TOTAL_NA) AS TOTAL_NA,
	SUM(TOTAL_NO + TOTAL_1ST + TOTAL_1PLUS) AS TOTAL
FROM
	RESULT_TMP RT
LEFT JOIN SUBAPP_CC_CHECK_LIST CCC
ON CCC.ID = RT.CHECKLIST_ID
LEFT JOIN SUBAPP_SUB_TRADE ST
ON ST.ID = CCC.SUB_TRADE_ID
WHERE @WHERECLAUSE
GROUP BY PROJECT_ID, ST.SUB_TRADE;</value>
  </data>
  <data name="QaQcGetCriticalDataProject1" xml:space="preserve">
    <value>WITH RESULT_TMP (PROJECT_ID, FORM_ID, CHECKLIST_ID, TRADE, TOTAL_NO, TOTAL_1ST, TOTAL_YES, TOTAL_1PLUS, PROJECTTYPE, MONTH_NAME) as (
	SELECT
		CRC.PROJECT_ID,
		CRC.FORM_ID,
		CRCD.CHECKLIST_ID,
		CRC.TRADE,
		COUNT(CASE WHEN CRCD.CONFORM = 0 THEN 1 END) AS TOTAL_NO, -- no
		COUNT(CASE WHEN CRCD.CONFORM = 99 THEN 1 END) AS TOTAL_1ST, -- yes = 
		0 AS TOTAL_YES,
		COUNT(CASE WHEN CRCD.CONFORM = 1 THEN 1 END) AS TOTAL_1PLUS, -- pass at 1st
		'QAQC_CRITICAL_CHECK' AS PROJECTTYPE,
		'Summary' AS MONTH_NAME
	FROM SUBAPP_CRC CRC
	LEFT JOIN SUBAPP_CRC_CHECKLIST_DETAIL CRCD ON CRC.ID = CRCD.CRC_ID
	INNER JOIN
		(SELECT CRC.FORM_ID,
				MAX(CRC.STAGE) AS STAGE
			FROM SUBAPP_CRC CRC
			WHERE CRC.IS_DELETED IS NOT TRUE
			GROUP BY CRC.FORM_ID) TMP ON CRC.FORM_ID = TMP.FORM_ID
	AND CRC.STAGE = TMP.STAGE
	WHERE CRC.IS_DELETED IS NOT TRUE
		AND CRCD.IS_DELETED IS NOT TRUE
		AND CRCD.IS_ACTIVE IS NOT FALSE
	GROUP BY CRC.PROJECT_ID, CRC.FORM_ID, CRC.TRADE, CRCD.CHECKLIST_ID
	ORDER BY CRC.FORM_ID
)
SELECT
	PROJECT_ID, 
	RT.TRADE AS DISCIPLINE,
	SST.SUB_TRADE,
	SST.SUB_TRADE AS SHORTFORM,
	SUM(TOTAL_NO) AS TOTAL_NO, 
	SUM(TOTAL_1ST) AS TOTAL_1ST, 
	SUM(TOTAL_YES) AS TOTAL_YES, 
	SUM(TOTAL_1PLUS) AS TOTAL_1PLUS,
	SUM(TOTAL_NO + TOTAL_1ST + TOTAL_1PLUS) AS TOTAL
FROM
	RESULT_TMP RT
LEFT JOIN SUBAPP_CRC_CHECK_LIST CRCC
ON CRCC.ID = RT.CHECKLIST_ID
LEFT JOIN SUBAPP_SUB_TRADE SST
ON SST.ID = CRCC.SUB_TRADE_ID
WHERE @WHERECLAUSE
GROUP BY
	PROJECT_ID, 
	RT.TRADE, 
	SST.SUB_TRADE;</value>
  </data>
  <data name="QaQcGetCriticalDataProject2" xml:space="preserve">
    <value>WITH RESULT_TMP (PROJECT_ID, FORM_ID, CHECKLIST_ID, TRADE, TOTAL_NO, TOTAL_1ST, TOTAL_YES, TOTAL_1PLUS, PROJECTTYPE, MONTH_NAME) as (
	SELECT
		CRC.PROJECT_ID,
		CRC.FORM_ID,
		CRCD.CHECKLIST_ID,
		CRC.TRADE,
		COUNT(CASE WHEN CRCD.CONFORM = 0 THEN 1 END) AS TOTAL_NO, -- no
		COUNT(CASE WHEN CRCD.CONFORM = 99 THEN 1 END) AS TOTAL_1ST, -- yes = 
		0 AS TOTAL_YES,
		COUNT(CASE WHEN CRCD.CONFORM = 1 THEN 1 END) AS TOTAL_1PLUS, -- pass at 1st
		'QAQC_CRITICAL_CHECK' AS PROJECTTYPE,
		'Summary' AS MONTH_NAME
	FROM SUBAPP_CRC CRC
	LEFT JOIN SUBAPP_CRC_CHECKLIST_DETAIL CRCD ON CRC.ID = CRCD.CRC_ID
	INNER JOIN
		(SELECT CRC.FORM_ID,
				MAX(CRC.STAGE) AS STAGE
			FROM SUBAPP_CRC CRC
			WHERE CRC.IS_DELETED IS NOT TRUE
			GROUP BY CRC.FORM_ID) TMP ON CRC.FORM_ID = TMP.FORM_ID
	AND CRC.STAGE = TMP.STAGE
	WHERE CRC.IS_DELETED IS NOT TRUE
		AND CRCD.IS_DELETED IS NOT TRUE
		AND CRCD.IS_ACTIVE IS NOT FALSE
	GROUP BY CRC.PROJECT_ID, CRC.FORM_ID, CRC.TRADE, CRCD.CHECKLIST_ID
	ORDER BY CRC.FORM_ID
)
SELECT
	PROJECT_ID, 
	SUM(TOTAL_NO) AS NO_OF_NO, 
	SUM(TOTAL_1ST) AS NO_OF_1ST, 
	SUM(TOTAL_YES) AS TOTAL_YES, 
	SUM(TOTAL_1PLUS) AS NO_OF_1PLUS,
	SUM(TOTAL_NO + TOTAL_1ST + TOTAL_1PLUS) AS TOTAL
FROM
	RESULT_TMP RT
LEFT JOIN SUBAPP_CRC_CHECK_LIST CRCC
ON CRCC.ID = RT.CHECKLIST_ID
LEFT JOIN SUBAPP_SUB_TRADE SST
ON SST.ID = CRCC.SUB_TRADE_ID
WHERE @WHERECLAUSE
GROUP BY
	PROJECT_ID;</value>
  </data>
  <data name="QAQCGroupByTradeSubTrade" xml:space="preserve">
    <value>WITH RESULT_TMP (PROJECT_ID, FORM_ID, CHECKLIST_ID, TRADE, TOTAL_NO, TOTAL_1ST, TOTAL_YES, TOTAL_1PLUS, CREATED_AT) as (
	SELECT
		CRC.PROJECT_ID,
		CRC.FORM_ID,
		CRCD.CHECKLIST_ID,
		CRC.TRADE,
		COUNT(CASE WHEN CRCD.CONFORM = 0 THEN 1 END) AS TOTAL_NO, -- no
		COUNT(CASE WHEN CRCD.CONFORM = 99 THEN 1 END) AS TOTAL_1ST, -- yes = 
		0 AS TOTAL_YES,
		COUNT(CASE WHEN CRCD.CONFORM = 1 THEN 1 END) AS TOTAL_1PLUS,
		CRC.FORM_DATE
	FROM SUBAPP_CRC CRC
	LEFT JOIN SUBAPP_CRC_CHECKLIST_DETAIL CRCD ON CRC.ID = CRCD.CRC_ID
	LEFT JOIN
		(SELECT CRC.FORM_ID,
				MAX(CRC.STAGE) AS STAGE
			FROM SUBAPP_CRC CRC
			WHERE CRC.IS_DELETED IS NOT TRUE
			GROUP BY CRC.FORM_ID) TMP ON CRC.FORM_ID = TMP.FORM_ID
	AND CRC.STAGE = TMP.STAGE
	WHERE CRC.IS_DELETED IS NOT TRUE
		AND CRCD.IS_DELETED IS NOT TRUE
		AND CRCD.IS_ACTIVE IS NOT FALSE
	GROUP BY CRC.PROJECT_ID, CRC.FORM_ID, CRCD.CHECKLIST_ID, TRADE, CRC.FORM_DATE
	ORDER BY CRC.FORM_ID
)
SELECT
	RT.TRADE,
	RT.TRADE AS DISCIPLINE,
	ST.SUB_TRADE,
	ST.SUB_TRADE AS SHORT_NAME,
	SUM(TOTAL_NO) AS TOTAL_NO, 
	SUM(TOTAL_1ST) AS TOTAL_1ST, 
	SUM(TOTAL_YES) AS TOTAL_YES, 
	SUM(TOTAL_1PLUS) AS TOTAL_1PLUS,
	SUM(TOTAL_NO + TOTAL_1ST + TOTAL_1PLUS) AS TOTAL
FROM
	RESULT_TMP RT
LEFT JOIN SUBAPP_CRC_CHECK_LIST CRCC
ON CRCC.ID = RT.CHECKLIST_ID
LEFT JOIN SUBAPP_SUB_TRADE ST
ON ST.ID = CRCC.SUB_TRADE_ID
WHERE @WHERECLAUSE
GROUP BY RT.TRADE, ST.SUB_TRADE;</value>
  </data>
  <data name="QAQCGroupByTradeSubTradeChecklist" xml:space="preserve">
    <value>WITH RESULT_TMP (PROJECT_ID, FORM_ID, CHECKLIST_ID, TRADE, TOTAL_NO, TOTAL_1ST, TOTAL_YES, TOTAL_1PLUS, CREATED_AT) as (
	SELECT
		CRC.PROJECT_ID,
		CRC.FORM_ID,
		CRCD.CHECKLIST_ID,
		CRC.TRADE,
		COUNT(CASE WHEN CRCD.CONFORM = 0 THEN 1 END) AS TOTAL_NO, -- no
		COUNT(CASE WHEN CRCD.CONFORM = 99 THEN 1 END) AS TOTAL_1ST, -- yes = 
		0 AS TOTAL_YES,
		COUNT(CASE WHEN CRCD.CONFORM = 1 THEN 1 END) AS TOTAL_1PLUS,
		CRC.FORM_DATE
	FROM SUBAPP_CRC CRC
	LEFT JOIN SUBAPP_CRC_CHECKLIST_DETAIL CRCD ON CRC.ID = CRCD.CRC_ID
	LEFT JOIN
		(SELECT CRC.FORM_ID,
				MAX(CRC.STAGE) AS STAGE
			FROM SUBAPP_CRC CRC
			WHERE CRC.IS_DELETED IS NOT TRUE
			GROUP BY CRC.FORM_ID) TMP ON CRC.FORM_ID = TMP.FORM_ID
	AND CRC.STAGE = TMP.STAGE
	WHERE CRC.IS_DELETED IS NOT TRUE
		AND CRCD.IS_DELETED IS NOT TRUE
		AND CRCD.IS_ACTIVE IS NOT FALSE
	GROUP BY CRC.PROJECT_ID, CRC.FORM_ID, CRCD.CHECKLIST_ID, TRADE, CRC.FORM_DATE
	ORDER BY CRC.FORM_ID
)
SELECT
	RT.TRADE,
	ST.SUB_TRADE,
	CRCC.CHECK_LIST,
	SUM(TOTAL_NO) AS TOTAL_NO, 
	SUM(TOTAL_1ST) AS TOTAL_1ST, 
	SUM(TOTAL_YES) AS TOTAL_YES, 
	SUM(TOTAL_1PLUS) AS TOTAL_1PLUS,
	SUM(TOTAL_NO + TOTAL_1ST + TOTAL_1PLUS) AS TOTAL
FROM
	RESULT_TMP RT
LEFT JOIN SUBAPP_CRC_CHECK_LIST CRCC
ON CRCC.ID = RT.CHECKLIST_ID
LEFT JOIN SUBAPP_SUB_TRADE ST
ON ST.ID = CRCC.SUB_TRADE_ID
WHERE @WHERECLAUSE
GROUP BY RT.TRADE, ST.SUB_TRADE, CRCC.CHECK_LIST;</value>
  </data>
  <data name="QAQCGroupByTradeSubTradePerMonth" xml:space="preserve">
    <value>WITH RESULT_TMP (PROJECT_ID, FORM_ID, CHECKLIST_ID, TRADE, TOTAL_NO, TOTAL_1ST, TOTAL_YES, TOTAL_1PLUS, CREATED_AT) as (
	SELECT
		CRC.PROJECT_ID,
		CRC.FORM_ID,
		CRCD.CHECKLIST_ID,
		CRC.TRADE,
		COUNT(CASE WHEN CRCD.CONFORM = 0 THEN 1 END) AS TOTAL_NO, -- no
		COUNT(CASE WHEN CRCD.CONFORM = 99 THEN 1 END) AS TOTAL_1ST, -- yes = 
		0 AS TOTAL_YES,
		COUNT(CASE WHEN CRCD.CONFORM = 1 THEN 1 END) AS TOTAL_1PLUS,
		CRC.FORM_DATE
	FROM SUBAPP_CRC CRC
	LEFT JOIN SUBAPP_CRC_CHECKLIST_DETAIL CRCD ON CRC.ID = CRCD.CRC_ID
	LEFT JOIN
		(SELECT CRC.FORM_ID,
				MAX(CRC.STAGE) AS STAGE
			FROM SUBAPP_CRC CRC
			WHERE CRC.IS_DELETED IS NOT TRUE
			GROUP BY CRC.FORM_ID) TMP ON CRC.FORM_ID = TMP.FORM_ID
	AND CRC.STAGE = TMP.STAGE
	WHERE CRC.IS_DELETED IS NOT TRUE
		AND CRCD.IS_DELETED IS NOT TRUE
		AND CRCD.IS_ACTIVE IS NOT FALSE
	GROUP BY CRC.PROJECT_ID, CRC.FORM_ID, CRCD.CHECKLIST_ID, TRADE, CRC.FORM_DATE
	ORDER BY CRC.FORM_ID
)
SELECT
	TO_CHAR(RT.CREATED_AT, 'MM-YY') AS PER_MONTH,
	ST.SUB_TRADE,
	SUM(TOTAL_NO) AS TOTAL_NO, 
	SUM(TOTAL_1ST) AS TOTAL_1ST, 
	SUM(TOTAL_YES) AS TOTAL_YES, 
	SUM(TOTAL_1PLUS) AS TOTAL_1PLUS,
	SUM(TOTAL_NO + TOTAL_1ST + TOTAL_1PLUS) AS TOTAL
FROM
	RESULT_TMP RT
LEFT JOIN SUBAPP_CRC_CHECK_LIST CRCC
ON CRCC.ID = RT.CHECKLIST_ID
LEFT JOIN SUBAPP_SUB_TRADE ST
ON ST.ID = CRCC.SUB_TRADE_ID
WHERE @WHERECLAUSE
GROUP BY TO_CHAR(RT.CREATED_AT, 'MM-YY'), TO_CHAR(RT.CREATED_AT, 'MM'), TO_CHAR(RT.CREATED_AT, 'YY'), ST.SUB_TRADE
ORDER BY TO_CHAR(RT.CREATED_AT, 'YY'), TO_CHAR(RT.CREATED_AT, 'MM');

WITH RESULT_TMP (PROJECT_ID, FORM_ID, CHECKLIST_ID, TRADE, TOTAL_NO, TOTAL_1ST, TOTAL_YES, TOTAL_1PLUS, CREATED_AT) as (
	SELECT
		CRC.PROJECT_ID,
		CRC.FORM_ID,
		CRCD.CHECKLIST_ID,
		CRC.TRADE,
		COUNT(CASE WHEN CRCD.CONFORM = 0 THEN 1 END) AS TOTAL_NO, -- no
		COUNT(CASE WHEN CRCD.CONFORM = 99 THEN 1 END) AS TOTAL_1ST, -- yes = 
		0 AS TOTAL_YES,
		COUNT(CASE WHEN CRCD.CONFORM = 1 THEN 1 END) AS TOTAL_1PLUS,
		CRC.FORM_DATE
	FROM SUBAPP_CRC CRC
	LEFT JOIN SUBAPP_CRC_CHECKLIST_DETAIL CRCD ON CRC.ID = CRCD.CRC_ID
	INNER JOIN
		(SELECT CRC.FORM_ID,
				MAX(CRC.STAGE) AS STAGE
			FROM SUBAPP_CRC CRC
			WHERE CRC.IS_DELETED IS NOT TRUE
			GROUP BY CRC.FORM_ID) TMP ON CRC.FORM_ID = TMP.FORM_ID
	AND CRC.STAGE = TMP.STAGE
	WHERE CRC.IS_DELETED IS NOT TRUE
		AND CRCD.IS_DELETED IS NOT TRUE
		AND CRCD.IS_ACTIVE IS NOT FALSE
	GROUP BY CRC.PROJECT_ID, CRC.FORM_ID, CRCD.CHECKLIST_ID, TRADE, CRC.FORM_DATE
	ORDER BY CRC.FORM_ID
)
SELECT
	ST.SUB_TRADE AS KEY,
	ST.SUB_TRADE AS TRADE_FULL_NAME,
	'' AS COLOR
FROM
	RESULT_TMP RT
LEFT JOIN SUBAPP_CRC_CHECK_LIST CRCC
ON CRCC.ID = RT.CHECKLIST_ID
LEFT JOIN SUBAPP_SUB_TRADE ST
ON ST.ID = CRCC.SUB_TRADE_ID
WHERE @WHERECLAUSE
GROUP BY ST.SUB_TRADE;</value>
  </data>
  <data name="QAQCGroupByTradeSubTradePerProject" xml:space="preserve">
    <value>WITH RESULT_TMP (PROJECT_ID, FORM_ID, CHECKLIST_ID, TRADE, TOTAL_NO, TOTAL_1ST, TOTAL_YES, TOTAL_1PLUS, PROJECTTYPE, MONTH_NAME, CREATED_AT) as (
	SELECT
		CRC.PROJECT_ID,
		CRC.FORM_ID,
		CRCD.CHECKLIST_ID,
		CRC.TRADE,
		COUNT(CASE WHEN CRCD.CONFORM = 0 THEN 1 END) AS TOTAL_NO, -- no
		COUNT(CASE WHEN CRCD.CONFORM = 99 THEN 1 END) AS TOTAL_1ST, -- yes = 
		0 AS TOTAL_YES,
		COUNT(CASE WHEN CRCD.CONFORM = 1 THEN 1 END) AS TOTAL_1PLUS, -- pass at 1st
		'QAQC_CRITICAL_CHECK' AS PROJECTTYPE,
		'Summary' AS MONTH_NAME,
		CRC.FORM_DATE
	FROM SUBAPP_CRC CRC
	LEFT JOIN SUBAPP_CRC_CHECKLIST_DETAIL CRCD ON CRC.ID = CRCD.CRC_ID
	LEFT JOIN
		(SELECT CRC.FORM_ID,
				MAX(CRC.STAGE) AS STAGE
			FROM SUBAPP_CRC CRC
			WHERE CRC.IS_DELETED IS NOT TRUE
			GROUP BY CRC.FORM_ID) TMP ON CRC.FORM_ID = TMP.FORM_ID
	AND CRC.STAGE = TMP.STAGE
	WHERE CRC.IS_DELETED IS NOT TRUE
		AND CRCD.IS_DELETED IS NOT TRUE
		AND CRCD.IS_ACTIVE IS NOT FALSE
	GROUP BY CRC.PROJECT_ID, CRC.FORM_ID, CRC.TRADE, CRCD.CHECKLIST_ID, CRC.FORM_DATE
	ORDER BY CRC.FORM_ID
)
SELECT
	PROJECT_ID,
	SST.SUB_TRADE,
	SUM(TOTAL_NO) AS TOTAL_NO, 
	SUM(TOTAL_1ST) AS TOTAL_1ST, 
	SUM(TOTAL_YES) AS TOTAL_YES, 
	SUM(TOTAL_1PLUS) AS TOTAL_1PLUS,
	SUM(TOTAL_NO + TOTAL_1ST + TOTAL_1PLUS) AS TOTAL
FROM
	RESULT_TMP RT
LEFT JOIN SUBAPP_CRC_CHECK_LIST CRCC
ON CRCC.ID = RT.CHECKLIST_ID
LEFT JOIN SUBAPP_SUB_TRADE SST
ON SST.ID = CRCC.SUB_TRADE_ID
WHERE @WHERECLAUSE
GROUP BY
	PROJECT_ID, SST.SUB_TRADE;</value>
  </data>
  <data name="SummaryCriticalCommonDigicheck" xml:space="preserve">
    <value>(WITH RESULT_TMP (PROJECT_ID, FORM_ID, TOTAL_NO, TOTAL_1ST, TOTAL_YES, TOTAL_1PLUS, PROJECTTYPE, MONTH_NAME) as (
	SELECT
		CRC.PROJECT_ID,
		CRC.FORM_ID,
		COUNT(CASE WHEN CRCD.CONFORM = 0 THEN 1 END) AS TOTAL_NO, -- no
		COUNT(CASE WHEN CRCD.CONFORM = 99 THEN 1 END) AS TOTAL_1ST, -- yes = 
		0 AS TOTAL_YES,
		COUNT(CASE WHEN CRCD.CONFORM = 1 THEN 1 END) AS TOTAL_1PLUS, -- pass at 1st
		'QAQC_CRITICAL_CHECK' AS PROJECTTYPE,
		'Summary' AS MONTH_NAME
	FROM SUBAPP_CRC CRC
	LEFT JOIN SUBAPP_CRC_CHECKLIST_DETAIL CRCD ON CRC.ID = CRCD.CRC_ID
	LEFT JOIN
		(SELECT CRC.FORM_ID,
				MAX(CRC.STAGE) AS STAGE
			FROM SUBAPP_CRC CRC
			WHERE CRC.IS_DELETED IS NOT TRUE
			GROUP BY CRC.FORM_ID) TMP ON CRC.FORM_ID = TMP.FORM_ID
	AND CRC.STAGE = TMP.STAGE
	WHERE CRC.IS_DELETED IS NOT TRUE
		AND CRCD.IS_DELETED IS NOT TRUE
		AND CRCD.IS_ACTIVE IS NOT FALSE
		AND @WHERECLAUSECRITICAL
	GROUP BY CRC.PROJECT_ID, CRC.FORM_ID
	ORDER BY CRC.FORM_ID
)
SELECT
	PROJECT_ID, 
	SUM(TOTAL_NO) AS TOTAL_NO, 
	SUM(TOTAL_1ST) AS TOTAL_1ST, 
	SUM(TOTAL_YES) AS TOTAL_YES, 
	SUM(TOTAL_1PLUS) AS TOTAL_1PLUS,
	SUM(TOTAL_NO + TOTAL_1ST + TOTAL_1PLUS) AS TOTAL, 
	PROJECTTYPE, 
	MONTH_NAME
FROM
	RESULT_TMP
GROUP BY PROJECT_ID, PROJECTTYPE, MONTH_NAME)
UNION
(WITH RESULT_TMP (PROJECT_ID, TOTAL_NO, TOTAL_1ST, TOTAL_YES, TOTAL_1PLUS, PROJECTTYPE, MONTH_NAME) as (
	SELECT
		CC.PROJECT_ID,
		COUNT(CASE WHEN CCD.CONFORM = 0 THEN 1 END) AS TOTAL_NO, -- no
		0 AS TOTAL_1ST, -- yes = 
		COUNT(CASE WHEN CCD.CONFORM = 99 THEN 1 END) AS TOTAL_YES, -- yes
		0 AS TOTAL_1PLUS, -- pass at 1st
		'QAQC_COMMON_CHECK' AS PROJECTTYPE,
		'Summary' AS MONTH_NAME
	FROM SUBAPP_CC CC
	LEFT JOIN SUBAPP_CC_CHECKLIST_DETAIL CCD ON CC.ID = CCD.CC_ID
	WHERE CC.IS_DELETED IS NOT TRUE
		AND CCD.IS_DELETED IS NOT TRUE
		AND @WHERECLAUSECOMMON
	GROUP BY CC.PROJECT_ID
)
SELECT
	PROJECT_ID, 
	SUM(TOTAL_NO) AS TOTAL_NO, 
	SUM(TOTAL_1ST) AS TOTAL_1ST, 
	SUM(TOTAL_YES) AS TOTAL_YES, 
	SUM(TOTAL_1PLUS) AS TOTAL_1PLUS,
	SUM(TOTAL_NO + TOTAL_YES) AS TOTAL, 
	PROJECTTYPE, 
	MONTH_NAME
FROM
	RESULT_TMP
GROUP BY PROJECT_ID, PROJECTTYPE, MONTH_NAME)</value>
  </data>
  <data name="SummaryReworkDefect" xml:space="preserve">
    <value>WITH TEMP_RESULT_REWORK (TRADE, MONTH) AS ( SELECT
        TRADE,
        DATE_TRUNC('MONTH', UPDATED_AT) AS month
    FROM
        SUBAPP_REWORK
	WHERE SUBAPP_REWORK.IS_DELETED IS NOT TRUE
		  AND SUBAPP_REWORK.IS_REJECTED IS NOT TRUE 
    GROUP BY
        TRADE,
        DATE_TRUNC('MONTH', UPDATED_AT)
    HAVING 
        COUNT(ID) FILTER (WHERE STATUS = 5) &lt; 2
    ORDER BY
        TRADE,
        MONTH
),
TEMP_RESULT_DEFECT AS (
    SELECT 
        'Defects' AS Project,
        COUNT(*) AS TOTAL_PROJECT,
        SUM(CASE WHEN SUBCON_COMPLETE_DATE &lt;= COMPLETE_DATE THEN 1 ELSE 0 END) AS SUM_OVERALL_SCORE,
        ROUND(SUM(CASE WHEN SUBCON_COMPLETE_DATE &lt;= COMPLETE_DATE THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS SCORE_AVG
    FROM 
        SUBAPP_REWORK
	WHERE SUBAPP_REWORK.IS_DELETED IS NOT TRUE
		  AND SUBAPP_REWORK.IS_REJECTED IS NOT TRUE
GROUP BY 
    SUBAPP_REWORK.PROJECT_ID
) 
SELECT COUNT(DISTINCT TEMP_RESULT_REWORK.TRADE) AS SCORE_AVG, 'Rework' AS PROJECTTYPE 
       FROM TEMP_RESULT_REWORK

UNION ALL

SELECT AVG(SCORE_AVG) AS SCORE_AVG, 'Defects' AS PROJECTTYPE
	   FROM TEMP_RESULT_DEFECT</value>
  </data>
</root>