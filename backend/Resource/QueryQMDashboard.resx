<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActualQMWeekly" xml:space="preserve">
    <value>-- 1. Actual Unit Handover to QM (OVERALL)
SELECT
	MUB.SITE_ID AS PROJECT_ID,
	DATE_TRUNC('week', MSH.CREATED_AT) AS WEEK_DATE_FORM,
	DATE_TRUNC('week', MSH.CREATED_AT) + INTERVAL '6 days' AS WEEK_DATE_TO,
	COUNT(*) AS UNIT,
	SUM(COUNT(*)) OVER ( ORDER BY DATE_TRUNC('week', MSH.CREATED_AT)) AS CUM_UNIT
FROM MODULE_UNIT_BLOCK MUB
LEFT JOIN MODULE_STEP MS ON MUB.ID = MS.MODULE_ID
LEFT JOIN STEP ON STEP.ID = MS.STEP_ID
LEFT JOIN FORM_TEMPLATE ON STEP.FORM_ID = FORM_TEMPLATE.ID
LEFT JOIN MODULE_STEP_HISTORY MSH ON MS.ID = MSH.MODULE_STEP_ID
WHERE 
	MUB.SITE_ID = @SITE_ID
	AND MS.IS_DELETED = FALSE
	AND MUB.IS_DELETED = FALSE
	AND (MS.STATUS = 99 OR MS.STATUS = 98)
	AND MSH.ROLE = 'QAQC'
	AND (FORM_TEMPLATE.NAME = 'QAQC-Unit-Handover' OR FORM_TEMPLATE.NAME = 'QAQC_Handover_Office')
GROUP BY
	MUB.SITE_ID,
	DATE_TRUNC('week', MSH.CREATED_AT)
ORDER BY 
	MUB.SITE_ID,
	DATE_TRUNC('week', MSH.CREATED_AT);

-- 2. Actual PREPARED &amp; READY FOR BCA INSPECTION
SELECT MUB.SITE_ID AS PROJECT_ID,
	DATE_TRUNC('week', MS.CREATED_AT) AS WEEK_DATE_FORM,
	DATE_TRUNC('week', MS.CREATED_AT) + INTERVAL '6 days' AS WEEK_DATE_TO,
	COUNT(*) AS UNIT,
	SUM(COUNT(*)) OVER ( ORDER BY DATE_TRUNC('week', MS.CREATED_AT)) AS CUM_UNIT
FROM MODULE_UNIT_BLOCK MUB
LEFT JOIN MODULE_STEP MS ON MODULE_ID = MUB.ID
LEFT JOIN MODULE_STEP_HISTORY MSH ON MS.ID = MSH.MODULE_STEP_ID
LEFT JOIN STEP S ON MS.STEP_ID = S.ID
LEFT JOIN FORM_TEMPLATE FT ON S.FORM_ID = FT.ID
WHERE MUB.SITE_ID = @SITE_ID
	AND MUB.IS_DELETED IS NOT TRUE
	AND MS.IS_DELETED IS NOT TRUE
	AND MSH.IS_DELETED IS NOT TRUE
	AND (MS.STATUS = 0 OR MS.STATUS = 1)
	AND FT.NAME = 'QAQC-Unit-BCA-Inspection'
GROUP BY
	MUB.SITE_ID,
	DATE_TRUNC('week', MS.CREATED_AT)
ORDER BY 
	MUB.SITE_ID,
	DATE_TRUNC('week', MS.CREATED_AT);

-- 3. Actual BCA Inspected (BCA Assessment)
SELECT
	MUB.SITE_ID AS PROJECT_ID,
	DATE_TRUNC('week', MSH.CREATED_AT) AS WEEK_DATE_FORM,
	DATE_TRUNC('week', MSH.CREATED_AT) + INTERVAL '6 days' AS WEEK_DATE_TO,
	COUNT(*) AS UNIT,
	SUM(COUNT(*)) OVER ( ORDER BY DATE_TRUNC('week', MSH.CREATED_AT)) AS CUM_UNIT
FROM MODULE_UNIT_BLOCK MUB
LEFT JOIN MODULE_STEP MS ON MODULE_ID = MUB.ID
LEFT JOIN MODULE_STEP_HISTORY MSH ON MS.ID = MSH.MODULE_STEP_ID
LEFT JOIN STEP S ON MS.STEP_ID = S.ID
LEFT JOIN FORM_TEMPLATE FT ON S.FORM_ID = FT.ID
WHERE MUB.SITE_ID = @SITE_ID
	AND MUB.IS_DELETED IS NOT TRUE
	AND MS.IS_DELETED IS NOT TRUE
	AND MSH.IS_DELETED IS NOT TRUE
	AND MS.STATUS = 99
	AND FT.NAME = 'QAQC-Unit-BCA-Inspection'
GROUP BY
	MUB.SITE_ID,
	DATE_TRUNC('week', MSH.CREATED_AT)
ORDER BY 
	MUB.SITE_ID,
	DATE_TRUNC('week', MSH.CREATED_AT);

-- 4. Actual BCA Assessment Score
WITH WEEKLY_SCORES AS
	(
		SELECT 
			MUB.SITE_ID,
			DATE_TRUNC('week', MSH.CREATED_AT) AS WEEK_DATE_FORM,
			DATE_TRUNC('week', MSH.CREATED_AT) + INTERVAL '6 days' AS WEEK_DATE_TO,
			SUM(CASE 
					WHEN (MSH.HISTORIES[3]-&gt;&gt;'Value') ~ '^[0-9]+(\.[0-9]+)?$' 
					THEN (MSH.HISTORIES[3]-&gt;&gt;'Value')::DOUBLE PRECISION 
					ELSE 0 
				END) AS AVG_WEEKLY_SCORE
		FROM MODULE_UNIT_BLOCK MUB
		LEFT JOIN MODULE_STEP MS ON MS.MODULE_ID = MUB.ID
		LEFT JOIN MODULE_STEP_HISTORY MSH ON MS.ID = MSH.MODULE_STEP_ID
		LEFT JOIN STEP ON MS.STEP_ID = STEP.ID
		LEFT JOIN FORM_TEMPLATE FT ON STEP.FORM_ID = FT.ID
		WHERE 
			MUB.SITE_ID = @SITE_ID
			AND MUB.IS_DELETED IS NOT TRUE
			AND MS.IS_DELETED IS NOT TRUE
			AND MSH.IS_DELETED IS NOT TRUE
			AND MS.STATUS = 99
			AND FT.NAME = 'QAQC-Unit-BCA-Inspection'
		GROUP BY
			MUB.SITE_ID,
			DATE_TRUNC('week', MSH.CREATED_AT)
		ORDER BY 
			MUB.SITE_ID,
			DATE_TRUNC('week', MSH.CREATED_AT)
	),
	CUMULATIVE_SCORES AS
	(
		SELECT 
			SITE_ID,
			WEEK_DATE_FORM, 
            WEEK_DATE_TO, 
            AVG_WEEKLY_SCORE,
        	SUM(AVG_WEEKLY_SCORE) OVER (ORDER BY WEEK_DATE_FORM ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS CUM_AVG_WEEKLY_SCORE
		FROM WEEKLY_SCORES
	)
SELECT 
	WS.SITE_ID AS PROJECT_ID,
	WS.WEEK_DATE_FORM, 
    WS.WEEK_DATE_TO, 
    WS.AVG_WEEKLY_SCORE AS UNIT,
    CS.CUM_AVG_WEEKLY_SCORE AS CUM_UNIT
FROM WEEKLY_SCORES WS
LEFT JOIN CUMULATIVE_SCORES CS ON WS.WEEK_DATE_FORM = CS.WEEK_DATE_FORM
ORDER BY WS.WEEK_DATE_FORM;</value>
  </data>
  <data name="LstHOQuery" xml:space="preserve">
    <value>SELECT MUB.ID,
	MUB.BLOCK,
	MUB.LEVEL,
	MUB.NAME,
	MS.STATUS,
	MSH.HISTORIES,
	MSH.CREATED_AT AS date,
	MUB.PLAN_START,
	MUB.PLAN_END,
	MUB.ACTUAL_START,
	MUB.ACTUAL_END,
	MUB.STATUS AS STATUS_UNIT
FROM MODULE_UNIT_BLOCK MUB
INNER JOIN MODULE_STEP MS ON MUB.ID = MS.MODULE_ID
INNER JOIN STEP ON STEP.ID = MS.STEP_ID
INNER JOIN FORM_TEMPLATE ON STEP.FORM_ID = FORM_TEMPLATE.ID
INNER JOIN MODULE_STEP_HISTORY MSH ON MS.ID = MSH.MODULE_STEP_ID
WHERE MUB.SITE_ID = @SITEID
	AND MS.SITE_ID = @SITEID
	AND FORM_TEMPLATE.NAME = @FORM_TEMPLATE
	AND MUB.IS_DELETED = FALSE
	AND MS.IS_DELETED = FALSE
	AND MSH.ROLE = 'QAQC'</value>
  </data>
  <data name="TargetQMWeekly" xml:space="preserve">
    <value>SELECT 
	ID,
	PROJECT_ID,
	WEEK_DATE_FORM,
	WEEK_DATE_TO,
	
	TARGET_UNIT_HANDOVER,
	SUM(TARGET_UNIT_HANDOVER) OVER (ORDER BY WEEK_DATE_FORM,WEEK_DATE_TO) AS CUM_TARGET_UNIT_HANDOVER,
	ACTUAL_UNIT_HANDOVER,
	SUM(ACTUAL_UNIT_HANDOVER) OVER (ORDER BY WEEK_DATE_FORM,WEEK_DATE_TO) AS CUM_ACTUAL_UNIT_HANDOVER,
	
	CUM_BCA_WATER_TEST_COMPLETED,
	
	TARGET_PREPARED_REALY,
	SUM(TARGET_PREPARED_REALY) OVER (ORDER BY WEEK_DATE_FORM,WEEK_DATE_TO) AS CUM_TARGET_PREPARED_REALY,
	ACTUAL_PREPARED_REALY,
	SUM(ACTUAL_PREPARED_REALY) OVER (ORDER BY WEEK_DATE_FORM,WEEK_DATE_TO) AS CUM_ACTUAL_PREPARED_REALY,
	
	TARGET_BCA_INSPECTED,
	SUM(TARGET_BCA_INSPECTED) OVER (ORDER BY WEEK_DATE_FORM,WEEK_DATE_TO) AS CUM_TARGET_BCA_INSPECTED,
	ACTUAL_BCA_INSPECTED,
	SUM(ACTUAL_BCA_INSPECTED) OVER (ORDER BY WEEK_DATE_FORM,WEEK_DATE_TO) AS CUM_ACTUAL_BCA_INSPECTED,
	
	
	BCA_ASSMENT_SCORE,
	SUM(BCA_ASSMENT_SCORE) OVER (ORDER BY WEEK_DATE_FORM,WEEK_DATE_TO) AS CUM_BCA_ASSMENT_SCORE,
	
	REMARK
FROM QM_WEEKLY_REPORT
WHERE IS_DELETED IS NOT TRUE AND PROJECT_ID = @SITEID
GROUP BY 
	ID,
	PROJECT_ID,
	WEEK_DATE_FORM,
	WEEK_DATE_TO,
	TARGET_UNIT_HANDOVER,
	CUM_BCA_WATER_TEST_COMPLETED,
	TARGET_PREPARED_REALY,
	TARGET_BCA_INSPECTED,
	REMARK
ORDER BY PROJECT_ID,
	WEEK_DATE_FORM,
	WEEK_DATE_TO;</value>
  </data>
</root>