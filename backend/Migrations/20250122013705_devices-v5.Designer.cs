// <auto-generated />
using System;
using System.Collections.Generic;
using MediHub.Web.DatabaseContext.AppDbcontext;
using MediHub.Web.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MediHub.Web.Migrations
{
    [DbContext(typeof(MediHubContext))]
    [Migration("20250122013705_devices-v5")]
    partial class devicesv5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MediHub.Web.Models.DepartmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("MediHub.Web.Models.DeviceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ContractDuration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("contract_duration");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<List<Guid>>("DepartmentIds")
                        .HasColumnType("uuid[]")
                        .HasColumnName("department_ids");

                    b.Property<List<string>>("DeviceAvatar")
                        .HasColumnType("text[]")
                        .HasColumnName("device_avatar");

                    b.Property<string>("DeviceCode")
                        .HasColumnType("text")
                        .HasColumnName("device_code");

                    b.Property<string>("DeviceName")
                        .HasColumnType("text")
                        .HasColumnName("device_name");

                    b.Property<string>("DeviceTroubleshootingInstructions")
                        .HasColumnType("text")
                        .HasColumnName("device_troubleshooting_instructions");

                    b.Property<string>("DeviceUsageInstructions")
                        .HasColumnType("text")
                        .HasColumnName("device_usage_instructions");

                    b.Property<ManagerEngineerInfo>("EngineerInfo")
                        .HasColumnType("jsonb")
                        .HasColumnName("engineer_info");

                    b.Property<string>("FunctionName")
                        .HasColumnType("text")
                        .HasColumnName("function_name");

                    b.Property<string>("ImportSource")
                        .HasColumnType("text")
                        .HasColumnName("import_source");

                    b.Property<List<string>>("InstallationContract")
                        .HasColumnType("text[]")
                        .HasColumnName("installation_contract");

                    b.Property<List<MaintenanceRecord>>("InternalMaintenanceCheck")
                        .HasColumnType("jsonb")
                        .HasColumnName("internal_maintenance_check");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LabUsage")
                        .HasColumnType("text")
                        .HasColumnName("lab_usage");

                    b.Property<string>("MachineStatus")
                        .HasColumnType("text")
                        .HasColumnName("machine_status");

                    b.Property<List<MaintenanceRecord>>("MaintenanceLog")
                        .HasColumnType("jsonb")
                        .HasColumnName("maintenance_log");

                    b.Property<List<MaintenanceRecord>>("MaintenanceReport")
                        .HasColumnType("jsonb")
                        .HasColumnName("maintenance_report");

                    b.Property<DateTime?>("MaintenanceSchedule")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("maintenance_schedule");

                    b.Property<ManagerEngineerInfo>("ManagerInfo")
                        .HasColumnType("jsonb")
                        .HasColumnName("manager_info");

                    b.Property<string>("ManufacturerCountry")
                        .HasColumnType("text")
                        .HasColumnName("manufacturer_country");

                    b.Property<string>("ManufacturerName")
                        .HasColumnType("text")
                        .HasColumnName("manufacturer_name");

                    b.Property<int>("ManufacturingYear")
                        .HasColumnType("integer")
                        .HasColumnName("manufacturing_year");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text")
                        .HasColumnName("serial_number");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTime>("UsageDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("usage_date");

                    b.HasKey("Id");

                    b.ToTable("devices");
                });

            modelBuilder.Entity("MediHub.Web.Models.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<List<Guid>>("DepartmentIds")
                        .HasColumnType("uuid[]")
                        .HasColumnName("department_ids");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsTokenValid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_token_valid");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<DateTime?>("LastLogout")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_logout");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture");

                    b.Property<List<string>>("Role")
                        .HasColumnType("text[]")
                        .HasColumnName("role");

                    b.Property<DateTime?>("TokenExpiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("token_expiration");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users");
                });
#pragma warning restore 612, 618
        }
    }
}
